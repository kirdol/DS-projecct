#############################################
## The following loads the needed packages ##
#############################################
# load the required packages and install them if they are not.
packages <- c(
"here", # for the project's organization
"tidyverse", # for wrangling
"ggrepel", "gghighlight", "patchwork", "maps", "scales", # for plotting
"stringr",
"tidyr",
"lubridate",
"gridExtra",
"readr",
"readxl",
"ggplot2",
"countrycode",
"stringi",
"forecast",
"tibble",
"reshape2",
"corrplot",
"stargazer",
"tinytex",
"cowplot",
"sf",
"dplyr",
"rnaturalearth",
"knitr",
"kableExtra",
"DT",
"FactoMineR",
"factoextra",
"dplyr",
"visdat",
"huxtable",
"plm",
"plotly",
"stargazer"
)
for (pkg in packages) {
if (!pkg %in% installed.packages()) {
install.packages(pkg)}}
for (pkg in packages) {
library(pkg, character.only = TRUE)}
######################################################
## The following sets a few option for nice reports ##
######################################################
# general options
options(
digits = 3,
str = strOptions(strict.width = "cut"),
width = 69,
tibble.width = 69,
cli.unicode = FALSE
)
# ggplot options
theme_set(theme_light())
# knitr options
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
# cache = TRUE,
fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
dpi = 300,
# out.width = "70%",
out.width = "100%",
fig.align = "center",
fig.width = 6,
# fig.asp = 0.618,
fig.show = "hold",
message = FALSE,
echo = FALSE
)
# cleaning of the environment
rm(packages, pkg)
###### EDA general #####
data <- read.csv(here("scripts", "data", "all_Merge.csv"))
### Boxplots to have an idea of the distribution and outliers ###
# different goals
par(mfrow=c(4,5))
for (i in 8:24) {
boxplot(data[, i], main = names(data)[i], horizontal = TRUE, ylim = c(0, 100))
}
pairs(data_question3_3[,c("overallscore", "ongoing", "sum_deaths", "pop_affected", "area_affected", "maxintensity")], upper.panel=panel.cor, diag.panel=panel.hist, main="Correlation table and distribution of conflicts variables")
source(here::here("scripts/Clean/setup.R"))
source(here::here("scripts/EDA/EDA_4_SDG.R"))
data_question1 <- read.csv(here("scripts","data","data_question1.csv"))
data_question24 <- read.csv(here("scripts", "data", "data_question24.csv"))
data_question2 <- read.csv(here("scripts", "data", "data_question24.csv"))
data_question3_1 <- read.csv(here("scripts", "data", "data_question3_1.csv"))
data_question3_2 <- read.csv(here("scripts", "data", "data_question3_2.csv"))
data_question3_3 <- read.csv(here("scripts", "data", "data_question3_3.csv"))
Q3.1 <- read.csv(here("scripts", "data", "data_question3_1.csv"))
Q3.2 <- read.csv(here("scripts", "data", "data_question3_2.csv"))
Q3.3 <- read.csv(here("scripts", "data", "data_question3_3.csv"))
data <- read.csv(here("scripts", "data", "all_Merge.csv"))
Correlation_overall <- data_question1 %>%
select(population:ef_regulation)
#### boxplots ####
#for goals
#dev.off()
boxplot(Correlation_overall[2:18],
las = 2,            # Makes the axis labels perpendicular to the axis
par(mar = c(5, 4, 4, 2) + 0.1),  # Adjusts the margins to fit all labels
cex.axis = 0.7,      # Reduces the size of the axis labels
cex.lab = 1,       # Reduces the size of the x and y labels
notch = TRUE,       # Specifies whether to add notches or not
main = "Merged goals boxplot", # Title of the boxplot
xlab = "Goals",  # X-axis label
ylab = "Score")     # Y-axis label
#for Human Freedom Index scores
boxplot(Correlation_overall[23:34],
las = 2,            # Makes the axis labels perpendicular to the axis
par(mar = c(7, 5, 2, 1)),  # Adjusts the margins to fit all labels
cex.axis = 0.7,      # Reduces the size of the axis labels
cex.lab = 1,       # Reduces the size of the x and y labels
notch = TRUE,       # Specifies whether to add notches or not
main = "Merged Human Freedom Index scores boxplot", # Title of the boxplot
ylab = "Score")     # Y-axis label
# for the remaining variables
par(mfrow=c(2,3))
for (i in 19:22){
boxplot(Correlation_overall[,i], main=names(Correlation_overall[i]), type="l")
}
par(mfrow=c(1,1))
table1 <- summary(data_question24)
kable(table1)
#### Correlations between variables ####
Correlation_overall <- data_question1 %>%
select(population:ef_regulation)
cor_matrix <- cor(Correlation_overall, use = "everything")
kable(cor_matrix)
#### Heatmap ####
cor_melted <- melt(cor_matrix)
ggplot(data = cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(size = 8)) +
coord_fixed() +
labs(x = '', y = '', title = 'Correlation Matrix Heatmap')
#### Pearson's correlation coeff ####
panel.hist <- function(x, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "lightgreen", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- (cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
# Independent variables
pairs(data_question1[,c("overallscore", "unemployment.rate", "GDPpercapita", "MilitaryExpenditurePercentGDP", "internet_usage")], upper.panel=panel.cor, diag.panel=panel.hist, main="Correlation table and distribution of various variables")
pairs(data_question1[,c("overallscore", "pf_law", "pf_security", "pf_movement", "pf_religion", "pf_assembly", "pf_expression", "pf_identity")], upper.panel=panel.cor, diag.panel=panel.hist, main="Correlation table and distribution of personal freedom variables")
pairs(data_question1[,c("overallscore", "ef_government", "ef_legal", "ef_money", "ef_trade", "ef_regulation")], upper.panel=panel.cor, diag.panel=panel.hist, main="Correlation table and distribution of economic freedom variables")
#### PCA ####
# for goals
myPCA_g <- PCA(data_question1[,9:20])
summary(myPCA_g)
myPCA_g$eig
#for HFI scores
myPCA_s <- PCA(data_question1[,30:40])
summary(myPCA_s)
myPCA_s$eig
#### Kmean clustering ####
data1_scaled <- scale(Correlation_overall)
row.names(data1_scaled) <- data_question1[,1]
fviz_nbclust(data1_scaled, kmeans, method="wss")
kmean <- kmeans(data1_scaled, 7, nstart = 25)
print(kmean)
fviz_cluster(kmean, data=data1_scaled, repel=TRUE, depth =NULL, ellipse.type = "norm")
pairs(data_question3_2[,c("overallscore", "cases_per_million", "deaths_per_million", "stringency")], upper.panel=panel.cor, diag.panel=panel.hist, main="Correlation table and distribution of COVID variables")
pairs(data_question3_3[,c("overallscore", "ongoing", "sum_deaths", "pop_affected", "area_affected", "maxintensity")], upper.panel=panel.cor, diag.panel=panel.hist, main="Correlation table and distribution of conflicts variables")
# Converted 'year' column to date format
Q3.1$year <- as.Date(as.character(Q3.1$year), format = "%Y")
Q3.2$year <- as.Date(as.character(Q3.2$year), format = "%Y")
Q3.3$year <- as.Date(as.character(Q3.3$year), format = "%Y")
covid_filtered <- Q3.2[Q3.2$year >= as.Date("2018-12-12"), ]
ggplot(data = covid_filtered, aes(x = year, y = cases_per_million, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.8, size = 0.5) +
labs(title = "Trend of COVID-19 Cases per Million Over Time",
x = "Year", y = "Cases per Million") +
facet_wrap(~ region, nrow = 2) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 4))
ggplot(data = covid_filtered, aes(x = year, y = deaths_per_million, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.8, size = 0.5) +
labs(title = "Trend of COVID-19 Deaths per Million Over Time", x = "Year", y = "Deaths per Million") +
facet_wrap(~ region, nrow = 2) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 4))
ggplot(data = covid_filtered, aes(x = year, y = stringency, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.7, size = 0.5) +
labs(title = "Trend of COVID-19 Stringency Over Time", x = "Year", y = "Stringency") +
facet_wrap(~ region, nrow = 2) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 4))
Q3.1[is.na(Q3.1)] <- 0
ggplot(data = Q3.1, aes(x = year, y = total_affected, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.7, size = 0.5) +
labs(title = "Trend of Total Affected from Climatic Disasters Over Time", x = "Year", y = "Total Affected") +
facet_wrap(~ region, nrow = 2) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 4))
conflicts_filtered <- Q3.3[Q3.3$year >= as.Date("2000-01-01") & Q3.3$year <= as.Date("2016-12-31"), ]
ggplot(data = conflicts_filtered, aes(x = year, y = sum_deaths, group = region, color = region)) +
geom_smooth(method = "loess", se = FALSE, span = 0.3, size = 0.5) +  # Using loess smoothing method
labs(title = "Trend of Deaths by Conflicts Over Time", x = "Year", y = "Sum Deaths") +
facet_wrap(~ region, nrow = 2) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 4))
ggplot(data = conflicts_filtered, aes(x = year, y = pop_affected, group = region, color = region)) +
geom_smooth(method = "loess", se = FALSE, span = 0.3, size = 0.5) +  # Using loess smoothing method
labs(title = "Trend of Population Affected by Conflicts Over Time", x = "Year", y = "pop_affected") +
facet_wrap(~ region, nrow = 2) +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 4))
Q3.1[is.na(Q3.1)] <- 0
south_east_asia_data <- Q3.1[Q3.1$region %in% c("South Asia", "East Asia"), ]
relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "total_affected", "no_homeless")
correlation_matrix_disaster_Asia <- cor(south_east_asia_data[, relevant_columns], use = "complete.obs")
kable(correlation_matrix_disaster_Asia)
cor_melted <- as.data.frame(as.table(correlation_matrix_disaster_Asia))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")
ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(size = 8)) +
coord_fixed() +
labs(x = '', y = '',
title = 'Correlation between the climate disasters and the SDG goals in South and East Asia')
covid_filtered <- Q3.2[Q3.2$year >= as.Date("2019-01-01"), ]
relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "stringency", "cases_per_million", "deaths_per_million")
# Subset data with relevant columns for correlation analysis
relevant_data <- covid_filtered[, relevant_columns]
correlation_matrix_Covid <- cor(relevant_data, use = "complete.obs")
kable(correlation_matrix_Covid)
cor_melted <- as.data.frame(as.table(correlation_matrix_Covid))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")
ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(size = 8)) +
coord_fixed() +
labs(x = '', y = '',
title = 'Correlation between COVID and the SDG goals')
# Filter data for specific regions
selected_regions <- c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Eastern Europe")
conflicts_selected <- Q3.3[Q3.3$region %in% selected_regions, ]
# Select relevant columns for the correlation analysis
relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "sum_deaths")
# Compute correlation matrix for the selected regions
correlation_matrix_Conflicts_Deaths <- cor(conflicts_selected[, relevant_columns], use = "complete.obs")
# View the correlation matrix
kable(correlation_matrix_Conflicts_Deaths)
# Melt the correlation matrix for ggplot2
cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Deaths))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")
# Create the heatmap
ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(size = 8)) +
coord_fixed() +
labs(x = '', y = '',
title = 'Correlation between Conflicts deaths and the SDG goals')
# Filter data for specific regions (pop_affected)
selected_regions <- c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Eastern Europe","Caucasus and Central Asia")
conflicts_selected <- Q3.3[Q3.3$region %in% selected_regions, ]
# Select relevant columns for the correlation analysis
relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "pop_affected")
# Compute correlation matrix for the selected regions
correlation_matrix_Conflicts_Pop_Affected <- cor(conflicts_selected[, relevant_columns], use = "complete.obs")
# View the correlation matrix
kable(correlation_matrix_Conflicts_Pop_Affected)
# Melt the correlation matrix for ggplot2
cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Pop_Affected))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")
# Create the heatmap
ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(size = 8)) +
coord_fixed() +
labs(x = '', y = '',
title = 'Correlation between Conflicts Affected Population and the SDG goals')
covid_filtered <- Q3.2[Q3.2$year >= as.Date("2018-12-12"), ]
ggplot(data = covid_filtered, aes(x = year, y = cases_per_million, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.8, size = 0.5) +
labs(title = "Trend of COVID-19 Cases per Million Over Time",
x = "Year", y = "Cases per Million") +
facet_wrap(~ region, nrow = 4) +
theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
plot.title = element_text(margin = margin(b = 20), hjust = 0.5,
vjust = 8, lineheight = 2)
) +
theme(legend.position = "right") +
guides(color = guide_legend(nrow = 1))
covid_filtered <- Q3.2[Q3.2$year >= as.Date("2018-12-12"), ]
ggplot(data = covid_filtered, aes(x = year, y = cases_per_million, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.8, size = 0.5) +
labs(title = "Trend of COVID-19 Cases per Million Over Time",
x = "Year", y = "Cases per Million") +
facet_wrap(~ region, nrow = 4) +
theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
plot.title = element_text(margin = margin(b = 20), hjust = 0.5,
vjust = 8, lineheight = 2)
) +
theme(legend.position = "right") +
guides(color = guide_legend(ncol = 1))
covid_filtered <- Q3.2[Q3.2$year >= as.Date("2018-12-12"), ]
ggplot(data = covid_filtered, aes(x = year, y = cases_per_million, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.8, size = 0.5) +
labs(title = "Trend of COVID-19 Cases per Million Over Time",
x = "Year", y = "Cases per Million") +
facet_wrap(~ region, nrow = 4) +
theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
plot.title = element_text(margin = margin(b = 20), hjust = 0.5,
vjust = 8, lineheight = 2),
strip.text = element_blank()
) +
theme(legend.position = "right") +
guides(color = guide_legend(ncol = 1))
covid_filtered <- Q3.2[Q3.2$year >= as.Date("2018-12-12"), ]
ggplot(data = covid_filtered, aes(x = year, y = cases_per_million, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.8, size = 0.5) +
labs(title = "Trend of COVID-19 Cases per Million Over Time",
x = "Year", y = "Cases per Million") +
facet_wrap(~ region, nrow = 4) +
theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
plot.title = element_text(margin = margin(b = 20), hjust = 0.5,
vjust = 8, lineheight = 2),
strip.text = element_blank(),
panel.spacing = unit(0.5, "lines")
) +
theme(legend.position = "right") +
guides(color = guide_legend(ncol = 1))
ggplot(data = covid_filtered, aes(x = year, y = deaths_per_million, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.8, size = 0.5) +
labs(title = "Trend of COVID-19 Deaths per Million Over Time", x = "Year", y = "Deaths per Million") +
facet_wrap(~ region, nrow = 4) +
theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
plot.title = element_text(margin = margin(b = 20), hjust = 0.5,
vjust = 8, lineheight = 2),
strip.text = element_blank(),
panel.spacing = unit(0.5, "lines")
) +
theme(legend.position = "right") +
guides(color = guide_legend(ncol = 1))
Q3.1[is.na(Q3.1)] <- 0
ggplot(data = Q3.1, aes(x = year, y = total_affected, group = region, color = region)) +
geom_smooth(method = "loess",  se = FALSE, span = 0.7, size = 0.5) +
labs(title = "Trend of Total Affected from Climatic Disasters Over Time", x = "Year", y = "Total Affected") +
facet_wrap(~ region, nrow = 4) +
theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
plot.title = element_text(margin = margin(b = 20), hjust = 0.5,
vjust = 8, lineheight = 2),
strip.text = element_blank(),
panel.spacing = unit(0.5, "lines")
) +
theme(legend.position = "right") +
guides(color = guide_legend(ncol = 1))
conflicts_filtered <- Q3.3[Q3.3$year >= as.Date("2000-01-01") & Q3.3$year <= as.Date("2016-12-31"), ]
ggplot(data = conflicts_filtered, aes(x = year, y = sum_deaths, group = region, color = region)) +
geom_smooth(method = "loess", se = FALSE, span = 0.3, size = 0.5) +  # Using loess smoothing method
labs(title = "Trend of Deaths by Conflicts Over Time", x = "Year", y = "Sum Deaths") +
facet_wrap(~ region, nrow = 4) +
theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
plot.title = element_text(margin = margin(b = 20), hjust = 0.5,
vjust = 8, lineheight = 2),
strip.text = element_blank(),
panel.spacing = unit(0.5, "lines")
) +
theme(legend.position = "right") +
guides(color = guide_legend(ncol = 1))
ggplot(data = conflicts_filtered, aes(x = year, y = pop_affected, group = region, color = region)) +
geom_smooth(method = "loess", se = FALSE, span = 0.3, size = 0.5) +  # Using loess smoothing method
labs(title = "Trend of Population Affected by Conflicts Over Time", x = "Year", y = "pop_affected") +
facet_wrap(~ region, nrow = 4) +
theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
plot.title = element_text(margin = margin(b = 20), hjust = 0.5,
vjust = 8, lineheight = 2),
strip.text = element_blank(),
panel.spacing = unit(0.5, "lines")
) +
theme(legend.position = "right") +
guides(color = guide_legend(ncol = 1))
