# Exploratory data analysis

```{r setup, echo = FALSE, message = FALSE, warning=FALSE}
source(here::here("scripts","Clean","setup.R"))
source(here:here("scripts","EDA","EDA_4_SDG.R"))
data_question1 <- read.csv(here("scripts","data","data_question1.csv"))
data_question24 <- read.csv(here("scripts", "data", "data_question24.csv"))
data_question2 <- read.csv(here("scripts", "data", "data_question24.csv"))
data_question3_1 <- read.csv(here("scripts", "data", "data_question3_1.csv"))
data_question3_2 <- read.csv(here("scripts", "data", "data_question3_2.csv"))
data_question3_3 <- read.csv(here("scripts", "data", "data_question3_3.csv"))
Q3.1 <- read.csv(here("scripts", "data", "data_question3_1.csv"))
Q3.2 <- read.csv(here("scripts", "data", "data_question3_2.csv"))
Q3.3 <- read.csv(here("scripts", "data", "data_question3_3.csv"))
data <- read.csv(here("scripts", "data", "all_Merge.csv"))
Correlation_overall <- data_question1 %>% 
      dplyr::select(population:ef_regulation)
```

## Focus on the influence of events over the SDG scores

In order to have an overview of the relationship between the different events variables and the SDG overall score, we make several graphs containing the Pearson correlation coefficient between the variable, the scatter plots describing the relationship between the variables, as well as the distribution of each variable.

```{r, echo = TRUE, message = FALSE, warning=FALSE, out.height="100%", out.width="100%"}

lower.panel <- function(x, y, ...){
   points(x, y, pch = 20, col = "darkgreen", cex = 0.2)
}
 
 panel.hist <- function(x, ...){
   usr <- par("usr"); on.exit(par(usr))
   par(usr = c(usr[1:2], 0, 1.5) )
   h <- hist(x, plot = FALSE)
   breaks <- h$breaks; nB <- length(breaks)
   y <- h$counts; y <- y/max(y)
   rect(breaks[-nB], 0, breaks[-1], y, col = "lightgreen", ...)
 }
 
 # panel.cor_stars function with stars alongside correlation coefficients
 panel.cor_stars <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
   usr <- par("usr"); on.exit(par(usr))
   par(usr = c(0, 1, 0, 1))
   r <- cor(x, y)
   p_value <- cor.test (x,y)$p.value
 
   if (p_value < 0.001){
     stars <- "***"
   } else if (p_value < 0.01) {
     stars <- "**"
   } else if (p_value < 0.05) {
     stars <- "*"
   } else {
     stars <- ""
   }
   txt <- paste0(format(c(r, 0.123456789), digits = digits)[1], " ", stars)
   if(missing(cex.cor)) cex.cor <- 0.5/strwidth(txt)
   text(0.5, 0.5, txt, cex = cex.cor)
 }
 

pairs(data_question3_1[, c("overallscore", "total_affected", "total_deaths")], upper.panel = panel.cor_stars,diag.panel = panel.hist,lower.panel = lower.panel, main = "Correlation table and distribution of Disaster variables")
```

Meaning of the stars: *** : p_value < 0.001; ** : p_value < 0.01; *: p_value <0.05; no star if p_value is higher.


The different variables used to materialize the impact of climate disasters do not seem to have important influence on the overall score. Indeed, the overallscore and total_affected have a correlation coefficient that suggests a very weak negative linear relationship between this variables and which is not statistically significant (p â‰¥ 0.05), and the overallscore and total_deaths have a correlation that also indicates a weak negative linear relationship that is statistically significant at  p < 0.05. But we will further explore for the different SDGs, since we believe that such disasters have a specific influence on some SDGs.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="100%"}
pairs(data_question3_2[,c("overallscore", "cases_per_million", "deaths_per_million", "stringency")], upper.panel = panel.cor_stars, diag.panel=panel.hist, lower.panel = lower.panel,main="Correlation table and distribution of COVID variables")
```

Meaning of the stars: *** : p_value < 0.001; ** : p_value < 0.01; *: p_value <0.05; no star if p_value is higher.


The different variables used to materialize the impact of COVID19 do not seem to have important influence on the overall score, we can see that Overallscore and cases_per_million/deaths_per_million/stringency have a correlation coefficient indicating a weak positive linear relationship that is highly statistically significant at p < 0.001. But we will further explore for the different SDGs, since we believe that COVID19 had a specific influence on some SDGs, for instance "good health and well-being" or "decent work and economic growth".

Concerning the correlation effect between the COVID19 variables, we could have no surprises, Cases_per_million and deaths_per_million have a moderate to strong positive correlation suggesting a stronger relationship where an increase in the number of COVID-19 cases per million is associated with a substantial increase in the number of deaths per million. This indicates a significant correlation between case prevalence and mortality rate. Cases_per_million and stringency have a moderate positive correlation indicates that higher levels of cases per million are associated with slightly higher severity of health measures. This could mean that in regions where cases are more numerous, stricter sanitary measures can be put in place to control the spread of the virus. Finally, Deaths_per_million and stringency have a strong positive correlation indicating a robust relationship where higher mortality rates are associated with higher severity of sanitary measures. This  suggest that in areas where deaths are higher, stricter sanitary measures are applied in an attempt to reduce the spread of the virus and mortality.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="100%"}
pairs(data_question3_3[,c("overallscore", "ongoing", "sum_deaths", "pop_affected", "area_affected", "maxintensity")], upper.panel = panel.cor_stars, diag.panel=panel.hist, lower.panel = lower.panel, main="Correlation table and distribution of conflicts variables")
```

Meaning of the stars: *** : p_value < 0.001; ** : p_value < 0.01; *: p_value <0.05; no star if p_value is higher.


Negative values (ranging from -0.17 to -0.28) with three stars (***) indicate a strong and statistically significant negative correlation between the overall index (Overallscore) and the various conflict-related variables (Ongoing, sum_deaths, pop_affected, area_affected, maxintensity). A strong negative correlation means that an increase in the Overallscore is associated with a decrease in the values of the other variables. But we have to take into account that correlation does not necessarily imply direct causation. Further analysis may be required to understand in depth the nature of the relationships between these variables.

To explore our data on events such as disasters, covid-19 and conflicts we have to first see which countries are the most touched by these. To do so, we made time-series analysis on this three events each time depending on different variables.

```{r, echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE, out.height="100%", out.width="100%"}
# Converted 'year' column to date format
Q3.1$year <- as.Date(as.character(Q3.1$year), format = "%Y")
Q3.2$year <- as.Date(as.character(Q3.2$year), format = "%Y")
Q3.3$year <- as.Date(as.character(Q3.3$year), format = "%Y")
```

These is our time-analysis concerning the COVID-19 cases per million by region between end 2018 and 2022.

```{r, echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE, out.height="100%", out.width="100%"}
covid_filtered <- Q3.2[Q3.2$year >= as.Date("2018-12-12"), ]

ggplot(data = covid_filtered, aes(x = year, y = cases_per_million, group = region, color = region)) +
  geom_smooth(method = "loess", se = FALSE, span = 0.8, size = 0.6) + 
  labs(x = "Year", y = "Cases per Million") +
  facet_wrap(~ region, ncol = 3, strip.position = "top") +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
        axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
        strip.text = element_text(size = 8),
        plot.title = element_text(hjust = 0.5),
        panel.spacing = unit(1, "lines"),
        legend.position = "none"
  ) +
  ggtitle("Trend of COVID-19 Cases per Million Over Time")
```

These is our time-analysis concerning the COVID-19 deaths per million per region between end 2018 and 2022

```{r, echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE, out.height="100%", out.width="100%"}

ggplot(data = covid_filtered, aes(x = year, y = deaths_per_million, group = region, color = region)) +
  geom_smooth(method = "loess", se = FALSE, span = 0.8, size = 0.6) + 
  labs(x = "Year", y = "Deaths per Million") +
  facet_wrap(~ region, nrow = 5, strip.position = "top") +
  theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
        axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
        strip.text = element_text(size = 8),
        panel.spacing = unit(0.5, "lines"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none"
  ) +
  ggtitle("Trend of COVID-19 Deaths per Million Over Time")
```

These is our time-analysis concerning the COVID-19 stringency per region between end 2018 and 2022

```{r, echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE, out.height="100%", out.width="100%"}
ggplot(data = covid_filtered, aes(x = year, y = stringency, group = region, color = region)) +
  geom_smooth(method = "loess",  se = FALSE, span = 0.7, size = 0.6) + 
  labs(x = "Year", y = "Stringency") +
  facet_wrap(~ region, nrow = 5) +
  theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
        axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
        strip.text = element_text(size = 8),
        panel.spacing = unit(0.5, "lines"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none"
  ) +
  ggtitle("Trend of COVID-19 Stringency Over Time")
```

These is our time-analysis concerning climatic disasters with total affected per region

```{r, echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE, out.height="100%", out.width="100%"}
Q3.1[is.na(Q3.1)] <- 0
ggplot(data = Q3.1, aes(x = year, y = total_affected, group = region, color = region)) +
  geom_smooth(method = "loess",  se = FALSE, span = 0.7, size = 0.5) + 
  labs(x = "Year", y = "Total Affected") +
  facet_wrap(~ region, nrow = 5) +
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
  theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
        axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
        strip.text = element_text(size = 8),
        panel.spacing = unit(0.5, "lines"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none"
  ) +
  ggtitle("Trend of Total Affected from Climatic Disasters Over Time")
```

These is our time-analysis concerning conflicts deaths per region between 2000 and 2016

```{r, echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE, out.height="100%", out.width="100%"}
conflicts_filtered <- Q3.3[Q3.3$year >= as.Date("2000-01-01") & Q3.3$year <= as.Date("2016-12-31"), ]

ggplot(data = conflicts_filtered, aes(x = year, y = sum_deaths, group = region, color = region)) +
  geom_smooth(method = "loess", se = FALSE, span = 0.3, size = 0.6) +
  labs(x = "Year", y = "Sum 0f Deaths") +
  facet_wrap(~ region, nrow = 5) +
  theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
        axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
        strip.text = element_text(size = 8),
        panel.spacing = unit(0.5, "lines"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none"
  ) +
  ggtitle("Trend of Deaths by Conflicts Over Time")
```

We can see that the regions' the most affected by the conflicts are : Middle east and north Africa, Sub-Saharan Africa, South Asia, then less America & the Caribbean and Eastern Europe

These is our time-analysis concerning conflicts affected population per region between 2000 and 2016

```{r, echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE, out.height="100%", out.width="100%"}
ggplot(data = conflicts_filtered, aes(x = year, y = pop_affected, group = region, color = region)) +
  geom_smooth(method = "loess", se = FALSE, span = 0.3, size = 0.6) + 
  labs(x = "Year", y = "Population affected") +
  facet_wrap(~ region, nrow = 5) +
  theme(axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
        axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
        strip.text = element_text(size = 8),
        panel.spacing = unit(0.5, "lines"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none"
  ) +
  ggtitle("Trend of Population Affected by Conflicts Over Time")
```

We can see that the regions' the most affected by the conflicts are : Middle east and north Africa, Sub-Saharan Africa, South Asia, America & the Caribbean, Eastern Europe and sometimes Caucasus and Central Asia

Now that we could visualize which regions are the most impacted by these three events we can do correlations analysis per region to see if this events have indeed an impact on the evolution of SDG goals.

Here we want to analyse the correlation between the climate disasters and the SDG goals in South and East Asia.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="100%"}
Q3.1[is.na(Q3.1)] <- 0

selected_regions <- c("South Asia", "East Asia", "North America")
disaster_selected <- Q3.1[Q3.3$region %in% selected_regions, ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "total_affected", "no_homeless")

correlation_matrix_disaster <- cor(disaster_selected[, relevant_columns], use = "complete.obs")

kable(correlation_matrix_disaster)

cor_melted <- as.data.frame(as.table(correlation_matrix_disaster))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
        axis.text.y = element_text(size = 8)) +
  coord_fixed() +
  labs(x = '', y = '',
       title = 'Correlation between the climate disasters and the SDG goals in South and East Asia')

```

We conclude that climate disasters do not really have a big impact on SDG goals.

Here we want to analyse the correlation between the Covid-19 and the SDG goals only during Covid time.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="100%"}
covid_filtered <- Q3.2[Q3.2$year >= as.Date("2019-01-01"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "stringency", "cases_per_million", "deaths_per_million")

relevant_data <- covid_filtered[, relevant_columns]

correlation_matrix_Covid <- cor(relevant_data, use = "complete.obs")

kable(correlation_matrix_Covid)

cor_melted <- as.data.frame(as.table(correlation_matrix_Covid))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
        axis.text.y = element_text(size = 8)) +
  coord_fixed() +
  labs(x = '', y = '',
       title = 'Correlation between COVID and the SDG goals')
```

Same conclusion, really weird.

Here we want to analyse the correlation between conflicts deaths and the SDG goals only for the Middle East & North Africa, Sub-Saharan Africa, South Asia, Latin America & the Caribbean and Eastern Europe regions.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="100%"}

selected_regions <- c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Eastern Europe")
conflicts_selected <- Q3.3[Q3.3$region %in% selected_regions, ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "sum_deaths", "maxintensity")

correlation_matrix_Conflicts_Deaths <- cor(conflicts_selected[, relevant_columns], use = "complete.obs")

kable(correlation_matrix_Conflicts_Deaths)

cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Deaths))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
        axis.text.y = element_text(size = 8)) +
  coord_fixed() +
  labs(x = '', y = '',
       title = 'Correlation between Conflicts deaths and the SDG goals')
```

Finally, we want to analyse the correlation between conflicts affected population and the SDG goals only for the Middle East & North Africa, Sub-Saharan Africa, South Asia, Latin America & the Caribbean, Eastern Europe regions and Caucasus and Central Asia.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="100%"}

# Filter data for specific regions (pop_affected)
selected_regions <- c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Eastern Europe","Caucasus and Central Asia")
conflicts_selected <- Q3.3[Q3.3$region %in% selected_regions, ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "pop_affected")

correlation_matrix_Conflicts_Pop_Affected <- cor(conflicts_selected[, relevant_columns], use = "complete.obs")

kable(correlation_matrix_Conflicts_Pop_Affected)

cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Pop_Affected))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
        axis.text.y = element_text(size = 8)) +
  coord_fixed() +
  labs(x = '', y = '',
       title = 'Correlation between Conflicts Affected Population and the SDG goals')
```

# Focus on the correlation between the SDG scores and the different events.

Starting from what we saw with our correlation maps, we concluded that they did not have any big impact on the SDG scores per region.

Here you can see an extract of our correlation map between the climate disasters and the SDG goals in South and East Asia as it was the regions that where the most impacted.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="100%"}

library(ggplot2)

disaster_data <- Q3.1[Q3.1$region %in% c("South Asia", "East Asia", "North America"), ]
relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "total_affected", "total_deaths")
subset_data <- disaster_data[, relevant_columns]

correlation_matrix_subset <- cor(subset_data[, c("total_affected", "total_deaths")], subset_data)

cor_melted <- reshape2::melt(correlation_matrix_subset)
names(cor_melted) <- c("Variable2", "Variable1", "Correlation")

ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal() +
  theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
         axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
         plot.title = element_text(margin = margin(b = 20), hjust = 0.5, 
                                   vjust = 8, lineheight = 1.5)
  ) +
  coord_fixed() +
  labs(x = '', y = '',
       title = 'Correlation between the climate disasters and the SDG goals in South and East Asia and North America')
```

Here you can see an extract of our correlation map between the COVID-19 and the SDG goals.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="65%"}

covid_filtered <- Q3.2
relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "stringency", "cases_per_million", "deaths_per_million")
subset_data <- covid_filtered[, relevant_columns]

correlation_matrix_Covid <- cor(subset_data, subset_data[, c("stringency", "cases_per_million", "deaths_per_million")])

cor_melted <- as.data.frame(as.table(correlation_matrix_Covid))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

# Create the heatmap
library(ggplot2)

ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal() +
  theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
         axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
         plot.title = element_text(margin = margin(b = 20), hjust = 0.5, 
                                   vjust = 5, lineheight = 1.5)
  ) +
  coord_fixed() +
  labs(x = '', y = '',
       title = 'Correlation between COVID and the SDG goals')
```

Here you can see an extract of our correlation map between the conflicts and the SDG goals in Middle East & North Africa, Sub-Saharan Africa, South Asia, Latin America & the Caribbean, Eastern Europe, Caucasus and Central Asia as it was the regions that where the most impacted. We analysed this regions also for sum_deaths because it has the same touched regions than affected population.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="65%"}

conflicts_filtered <- Q3.3[Q3.3$region %in% c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Eastern Europe", "Caucasus and Central Asia"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "pop_affected", "sum_deaths", "maxintensity")

subset_data <- conflicts_filtered[, relevant_columns]

correlation_matrix_Conflicts_Pop_Aff <- cor(subset_data, subset_data[, c("pop_affected", "sum_deaths", "maxintensity")])

cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Pop_Aff))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

ggplot(data = cor_melted, aes(Variable1, Variable2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal() +
  theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
         axis.text.y = element_text(vjust = 1, size = 8, hjust = 1),
         plot.title = element_text(margin = margin(b = 20), hjust = 0.5, 
                                   vjust = 8, lineheight = 2)
  ) +
  coord_fixed() +
  labs(x = '', y = '',
       title = 'Correlation between Conflicts Affected Population & Deths and the SDG goals')
```

After looking at almost the same results, we asked ourselves if the fact that we do not see any correlations is because the consequences of this disasters arrive later on, so we decided to remake the same correlations with 1 year gap.

# Correlations for each event with one year gap

Here you can see for example our correlation map between the climate disasters and the SDG goals in South and East Asia with one year gap.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE, out.width="100%"}

disaster_data <- Q3.1[Q3.1$region %in% c("South Asia", "East Asia", " North America"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "total_affected", "total_deaths")

subset_data <- disaster_data[, relevant_columns]

lagged_subset_data <- subset_data %>%
  mutate(
    lagged_total_affected = lag(total_affected, default = NA),
    lagged_total_deaths = lag(total_deaths, default = NA)
  )

correlation_matrix_lagged <- cor(lagged_subset_data[, c("lagged_total_affected", "lagged_total_deaths")], subset_data)

cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")

ggplot(data = cor_melted_lagged, aes(Variable1, Variable2, fill = Correlation)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal() +
  theme( axis.text.x = element_text(angle = 45, size = 8, hjust = 1),
         axis.text.y = element_text(vjust = 1, size = 8, hjust = 2),
         plot.title = element_text(margin = margin(b = 20), hjust = 0.5, 
                                   vjust = 6, lineheight = 1.5)
  ) +
  coord_fixed() +
  labs(x = '', y = '',
       title = 'Correlation between the climate disasters and the SDG goals in South and East Asia with 1 year gap')+
    theme(plot.title = element_text(size = 8, vjust =12))
```

Even with a year gap it doesn't seem that climate disaster with such consequences as the population that gets affected and dies has an impact on the SDG scores as we would have though. But we are still a little bit optimistic and though why not look at the correlations with a gap year over the years.

# Interactive map of the correlation between the different events and the SDG goals with 1 year gap.

Here you can see an interactive map of the correlation between the climate disasters and the SDG goals in South and East Asia with 1 year gap. To better understand the results, if we select a specific year (e.g., 2020) in the app, the analysis will show correlations between the SDG scores for the selected year (e.g., 2020) and the disaster-related variables (total_affected and total_deaths) from the previous year (e.g., 2019). results -\> nothing?

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(plotly)

Q3.1 <- Q3.1 %>%
  arrange(code,year)%>%
  group_by(code)

disaster_data <- Q3.1[Q3.1$region %in% c("South Asia", "East Asia", "North America"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "total_affected", "total_deaths")

subset_data <- disaster_data[, relevant_columns]

lagged_subset_data <- subset_data %>%
  mutate(
    lagged_total_affected = lag(total_affected, default = NA),
    lagged_total_deaths = lag(total_deaths, default = NA)
  )

correlation_matrix_lagged <- cor(lagged_subset_data[, c("lagged_total_affected", "lagged_total_deaths")], subset_data)

cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")

ui <- fluidPage(
  titlePanel("Interactive Correlation Heatmap between the climate disasters and the SDG goals in South and East Asia with 1 year gap"),
  plotlyOutput("heatmap"),
  sliderInput("year", "Select Year", min = 2000, max = 2021, value = 2012, step = 1),
  verbatimTextOutput("correlation_output") 
)

server <- function(input, output) {
  selected_data <- reactive({
    filtered_data <- disaster_data[disaster_data$year == input$year, ]
    subset_data <- filtered_data[, relevant_columns]
    lagged_subset_data <- subset_data %>%
      mutate(
        lagged_total_affected = lag(total_affected, default = NA),
        lagged_total_deaths = lag(total_deaths, default = NA)
      )
    
    correlation_matrix_lagged <- cor(lagged_subset_data[, c("lagged_total_affected", "lagged_total_deaths")], subset_data)
    
    cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
    names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")
    
    return(cor_melted_lagged)
  })
  
  output$heatmap <- renderPlotly({
    p <- plot_ly(data = selected_data(), x = ~Variable1, y = ~Variable2, z = ~Correlation, 
                 type = "heatmap", colorscale = list(c(-1, "blue"), c(0, "white"), c(1, "red")),
                 zmin = -1, zmax = 1)
    
    p <- p %>% layout(
      title = "",
      xaxis = list(title = ""),
      yaxis = list(title = ""),
      coloraxis = list(
        colorbar = list(
          title = "Correlation",  
          tickvals = c(-1, 0, 1),  
          ticktext = c("-1", "0", "1"),
          len = 5,
          thickness = 20,
          x = 0,
          xanchor = "left",
          ticks = "outside" 
        )
      )
    )
    return(p)
  })
}
shinyApp(ui = ui, server = server)
```

here you can see an interactive map of the correlation between COVID-19 and the SDG goals with 1 year gap. And strangely, instead of having a negative correlation, we expected that the more cases and deaths happened because of COVID-19, the scores of the SDG would be negatively affected,but with the gap year we can see that the scores of the Goal3, Goal6, Goal9 and Goal16 are quite positively impacted by the COVID-19.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(plotly)

Q3.2 <- Q3.2 %>%
  arrange(code,year)%>%
  group_by(code)

Q3.2 <- read.csv(here("scripts", "data", "data_question3_2.csv"))

covid_filtered <- Q3.2
relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "stringency", "cases_per_million", "deaths_per_million")

subset_data <- covid_filtered[, relevant_columns]

correlation_matrix_Covid <- cor(subset_data, subset_data[, c("stringency", "cases_per_million", "deaths_per_million")])

cor_melted <- as.data.frame(as.table(correlation_matrix_Covid))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

ui <- fluidPage(
  titlePanel("Interactive Correlation Heatmap between COVID and the SDG goal with one year gap"),
  plotlyOutput("heatmap"),
  sliderInput("year", "Select Year", min = 2020, max = 2022, value = 2020, step = 1)
)

server <- function(input, output) {
  selected_covid_data <- reactive({
    filtered_data <- covid_filtered[covid_filtered$year == input$year, ]
    subset_data <- filtered_data[, relevant_columns]
    return(subset_data)
  })
  
  output$heatmap <- renderPlotly({
    correlation_matrix_Covid <- cor(selected_covid_data(), selected_covid_data()[, c("stringency", "cases_per_million", "deaths_per_million")])
    cor_melted <- as.data.frame(as.table(correlation_matrix_Covid))
    names(cor_melted) <- c("Variable1", "Variable2", "Correlation")
    
    p <- plot_ly(data = cor_melted, x = ~Variable1, y = ~Variable2, z = ~Correlation,
                 type = "heatmap", colorscale = list(c(0, "blue"), c(0.5, "white"), c(1, "red")),
                 zmin = -1, zmax = 1)
    
    p <- p %>% layout(
      title = "",
      xaxis = list(title = ""),
      yaxis = list(title = ""),
      coloraxis = list(
        colorbar = list(
          title = "Correlation",
          tickvals = c(-1, 0, 1), 
          ticktext = c("-1", "0", "1"),
          len = 5, 
          thickness = 20, 
          x = 0,
          xanchor = "left", 
          ticks = "outside"
        )
      )
    )
    return(p)
  })
}
shinyApp(ui = ui, server = server)
```

Finally, here you can see an interactive map of the correlation between Conflict and the SDG goals with 1 year gap. Nothing?

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(plotly)

Q3.3 <- Q3.3 %>%
  arrange(code,year)%>%
  group_by(code)

conflicts_filtered <- Q3.3[Q3.3$region %in% c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Eastern Europe", "Caucasus and Central Asia"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "pop_affected", "sum_deaths", "maxintensity")

subset_data <- conflicts_filtered[, relevant_columns]

correlation_matrix_Conflicts_Pop_Aff <- cor(subset_data, subset_data[, c("pop_affected", "sum_deaths", "maxintensity")])

cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Pop_Aff))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

ui <- fluidPage(
  titlePanel("Interactive Correlation Heatmap between Conflicts in selected regions and the SDG goal with one year gap"),
  plotlyOutput("heatmap"),
  sliderInput("year", "Select Year", min = 2000, max = 2016, value = 2005, step = 1)
)

server <- function(input, output) {
  selected_conflicts_data <- reactive({
    filtered_data <- conflicts_filtered[conflicts_filtered$year == input$year, ]
    subset_data <- filtered_data[, relevant_columns]
    return(subset_data)
  })
  
  output$heatmap <- renderPlotly({
    correlation_matrix_Conflicts_Pop_Aff <- cor(selected_conflicts_data(), selected_conflicts_data()[, c("pop_affected", "sum_deaths", "maxintensity")])
    cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Pop_Aff))
    names(cor_melted) <- c("Variable1", "Variable2", "Correlation")
    
    p <- plot_ly(data = cor_melted, x = ~Variable1, y = ~Variable2, z = ~Correlation,
                 type = "heatmap", colorscale = list(c(-1, "blue"), c(0, "white"), c(1, "red")),
                 zmin = -1, zmax = 1)
    
    p <- p %>% layout(
      title = "",
      xaxis = list(title = ""),
      yaxis = list(title = ""),
      coloraxis = list(
        colorbar = list(
          title = "Correlation",
          tickvals = c(-1, 0, 1), 
          ticktext = c("-1", "0", "1"), 
          len = 5,  
          thickness = 20,  
          x = 0,  
          xanchor = "left", 
          ticks = "outside" 
        )
      )
    )
    return(p)
  })
}
shinyApp(ui = ui, server = server)
```

The results seems logic because if the SDG scores continue to go higher and the conflicts remains the same or finishes we get a negative correlation


Our last idea is to see the regressions between the SDG scores and the variables of each event that we thought interesting.

# Regressions between the SDG scores and the events variables.

Let's see the regressions for each score depending of each variable in the disasters dataset (total_affected and total_deaths)

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(dplyr)
library(ggplot2)
library(scales)

disaster_data <- Q3.1[Q3.1$region %in% c("South Asia", "East Asia", "North America"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "total_affected", "total_deaths")

subset_data <- disaster_data[, relevant_columns]

goal_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16")


ui <- fluidPage(
  titlePanel("SDG and Climate Disasters Regression Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("sdg", "Select SDG Goal:",
                  choices = goal_columns,
                  selected = goal_columns[1]),
      width = 3
    ),
    mainPanel(
      width = 9,
      plotOutput("regression_plot_affected"),
      plotOutput("regression_plot_deaths")
    )
  )
)

server <- function(input, output) {
  generate_regression_plot <- function(selected_goal) {
    formula_affected <- as.formula(paste(selected_goal, "~ total_affected"))
    formula_deaths <- as.formula(paste(selected_goal, "~ total_deaths"))
    
    lm_total_affected <- lm(formula_affected, data = subset_data)
    lm_total_deaths <- lm(formula_deaths, data = subset_data)
    
    plot_total_affected <- ggplot(subset_data, aes(x = total_affected, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Total Affected"),
           x = "Total Affected", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    plot_total_deaths <- ggplot(subset_data, aes(x = total_deaths, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Total Deaths"),
           x = "Total Deaths", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    
    list(plot_total_affected, plot_total_deaths)
  }
  
  output$regression_plot_affected <- renderPlot({
    selected_goal <- input$sdg
    regression_plots <- generate_regression_plot(selected_goal)
    print(regression_plots[[1]])
  })
  
  output$regression_plot_deaths <- renderPlot({
    selected_goal <- input$sdg
    regression_plots <- generate_regression_plot(selected_goal)
    print(regression_plots[[2]])
  })
}
shinyApp(ui, server)
```

Most relationships between the goals and the variables ('total_affected' and 'total_deaths') are not statistically significant (indicated by p-values > 0.05).
More specifically, in several models, the coefficients for 'total_affected' and 'total_deaths' are small, indicating weak or negligible relationships with the respective goals.
Some models have marginally significant p-values (close to 0.05) but still lack statistical significance.
Goals 7, 8, 10, 13, 14, and 15 exhibit statistically significant relationships with 'total_affected,' indicating small to moderate positive relationships.
Goals 7 and 8 also show statistically significant relationships with 'total_deaths,' indicating moderate negative relationships.

These findings suggest that, in most cases, the relationships between the specified goals and COVID-19 variables (total affected and total deaths) are not statistically significant. However, some goals do indicate small to moderate associations with these variables.


Let's see the regressions for each score depending of each variable in the COVID-19 dataset (stringency, cases_per_million and deaths_per_million).

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

covid_filtered <- Q3.2

relevant_columns <- c(
  "goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "stringency", "cases_per_million", "deaths_per_million"
)
subset_data <- covid_filtered[, relevant_columns]

goal_columns <- c(
  "goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16"
)

ui <- fluidPage(
  titlePanel("SDG - COVID Regression Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("sdg", "Select SDG Goal:",
                  choices = goal_columns,
                  selected = goal_columns[1]),
      width = 3
    ),
    mainPanel(
      width = 9,
      plotOutput("regression_plot_stringency"),
      plotOutput("regression_plot_cases"),
      plotOutput("regression_plot_deaths")
    )
  )
)

server <- function(input, output) {
  generate_regression_plot <- function(selected_goal) {
    formula_stringency <- as.formula(paste(selected_goal, "~ stringency"))
    formula_cases <- as.formula(paste(selected_goal, "~ cases_per_million"))
    formula_deaths <- as.formula(paste(selected_goal, "~ deaths_per_million"))
    
    lm_stringency <- lm(formula_stringency, data = subset_data)
    lm_cases <- lm(formula_cases, data = subset_data)
    lm_deaths <- lm(formula_deaths, data = subset_data)
    
    plot_stringency <- ggplot(subset_data, aes(x = stringency, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Stringency"),
           x = "Stringency", y = selected_goal) +
      scale_x_continuous(labels = comma_format())
    
    plot_cases <- ggplot(subset_data, aes(x = cases_per_million, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Cases per Million"),
           x = "Cases per Million", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    plot_deaths <- ggplot(subset_data, aes(x = deaths_per_million, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Deaths per Million"),
           x = "Deaths per Million", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    list(plot_stringency, plot_cases, plot_deaths)
  }
  
  output$regression_plot_stringency <- renderPlot({
    selected_goal <- input$sdg
    regression_plots <- generate_regression_plot(selected_goal)
    print(regression_plots[[1]])  # Display plot for stringency vs selected_goal
  })
  
  output$regression_plot_cases <- renderPlot({
    selected_goal <- input$sdg
    regression_plots <- generate_regression_plot(selected_goal)
    print(regression_plots[[2]])  # Display plot for cases_per_million vs selected_goal
  })
  
  output$regression_plot_deaths <- renderPlot({
    selected_goal <- input$sdg
    regression_plots <- generate_regression_plot(selected_goal)
    print(regression_plots[[3]])  # Display plot for deaths_per_million vs selected_goal
  })
}

shinyApp(ui, server)
```

For all objectives (from objective 1 to objective 16), the predictor variables (stringency, number of cases per million and number of deaths per million) show statistically significant relationships. However, when assessed individually, these predictors explain only a marginal fraction of the variance of the respective objectives, with explanatory percentages ranging from around 0.141% to 6.99%.
Adjusted R-squared values consistently indicate limited explanatory power for these relationships, implying the influence of other factors not accounted for in the variations observed for each objective. 
Relying solely on rigor, cases per million and deaths per million results in modest predictive capabilities for each objective.

In summary, the statistical significance of stringency, cases per million and deaths per million in relation to each objective is clear. However, these predictive variables individually fail to explain the variations observed, highlighting the need to explore additional variables or unexplored factors in order to significantly improve predictive ability for each respective objective.


Now, let's see the regressions for each SDG score depending of each variable in the Conflicts dataset (pop_affected and sum_deaths).

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

conflicts_filtered <- Q3.3[Q3.3$region %in% c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Eastern Europe", "Caucasus and Central Asia"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "pop_affected", "sum_deaths", "maxintensity")

subset_data <- conflicts_filtered[, relevant_columns]

goal_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16"
)

ui <- fluidPage(
  titlePanel("SDG - Conflicts Regression Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("sdg", "Select SDG Goal:",
                  choices = goal_columns,
                  selected = goal_columns[1]),
      width = 3
    ),
    mainPanel(
      width = 9,
      plotOutput("regression_plot_pop_affected"),
      plotOutput("regression_plot_sum_deaths"),
      plotOutput("regression_plot_maxintensity")
    )
  )
)

server <- function(input, output) {
  generate_regression_plot <- function(selected_goal) {
    formula_pop_affected <- as.formula(paste(selected_goal, "~ pop_affected"))
    formula_sum_deaths <- as.formula(paste(selected_goal, "~ sum_deaths"))
    formula_maxintensity <- as.formula(paste(selected_goal, "~maxintensity"))
    
    lm_pop_affected <- lm(formula_pop_affected, data = subset_data)
    lm_sum_deaths <- lm(formula_sum_deaths, data = subset_data)
    lm_maxintensity <- lm(formula_maxintensity, data = subset_data)
    
    plot_pop_affected <- ggplot(subset_data, aes(x = pop_affected, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Population Affected"),
           x = "Population Affected", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    plot_sum_deaths <- ggplot(subset_data, aes(x = sum_deaths, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Sum of Deaths"),
           x = "Sum of Deaths", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    plot_maxintensity <- ggplot(subset_data, aes(x = sum_deaths, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Maxintensity"),
           x = "Maxintensity", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    list(plot_pop_affected, plot_sum_deaths, plot_maxintensity)
  }
  
  output$regression_plot_pop_affected <- renderPlot({
    selected_goal <- input$sdg
    regression_plots <- generate_regression_plot(selected_goal)
    print(regression_plots[[1]])  
  })
  
  output$regression_plot_sum_deaths <- renderPlot({
    selected_goal <- input$sdg
    regression_plots <- generate_regression_plot(selected_goal)
    print(regression_plots[[2]])  
  })
  
    output$regression_plot_maxintensity <- renderPlot({
    selected_goal <- input$sdg
    regression_plots <- generate_regression_plot(selected_goal)
    print(regression_plots[[3]])  
  })
}

shinyApp(ui, server)
```

All three predictors exhibited statistically significant relationships with the respective goals across the board. 'Maxintensity' generally demonstrated a relatively stronger association compared to 'Population Affected' and 'Deaths' in most analyses. But collectively, these predictors explained only a small to moderate portion of the variability observed in the different goals (adjusted R-squared ranging from approximately 1% to 9.48%). This suggests that there are other unaccounted factors not included in the analysis that significantly influence the outcomes of these goals.
To conclude, while 'Population Affected,' 'Deaths,' and 'Maxintensity' consistently showed significant associations with the various goals analyzed, their combined effect explained only a fraction of the variance observed in these goals. Therefore, there are likely additional crucial factors beyond these predictors that play substantial roles in influencing the outcomes of the respective goals.




