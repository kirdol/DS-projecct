---
title: "Interactive Matrix/Plots"
format: html
server: shiny
---
```{r echo = FALSE, message = FALSE, warning=FALSE}
source(here::here("scripts","Clean","setup.R"))
data_question1 <- read.csv(here("scripts","data","data_question1.csv"))
data_question24 <- read.csv(here("scripts", "data", "data_question24.csv"))
data_question2 <- read.csv(here("scripts", "data", "data_question24.csv"))
data_question3_1 <- read.csv(here("scripts", "data", "data_question3_1.csv"))
data_question3_2 <- read.csv(here("scripts", "data", "data_question3_2.csv"))
data_question3_3 <- read.csv(here("scripts", "data", "data_question3_3.csv"))
Q3.1 <- read.csv(here("scripts", "data", "data_question3_1.csv"))
Q3.2 <- read.csv(here("scripts", "data", "data_question3_2.csv"))
Q3.3 <- read.csv(here("scripts", "data", "data_question3_3.csv"))
data <- read.csv(here("scripts", "data", "all_Merge.csv"))
Correlation_overall <- data_question1 %>% 
      dplyr::select(population:ef_regulation)
```


### Interactive map of the correlation between the different events and the SDG goals with 1 year gap.

Here you can see an interactive map of the correlation between the climate disasters and the SDG goals in South and East Asia with 1 year gap. To better understand the results, if we select a specific year (e.g., 2020) in the app, the analysis will show correlations between the SDG scores for the selected year (e.g., 2020) and the disaster-related variables (total_affected and total_deaths) from the previous year (e.g., 2019).

```{r, eval = TRUE, echo = FALSE, message = FALSE, warning=FALSE}

library(viridis)

Q3.1 <- Q3.1 %>%
  arrange(code, year) %>%
  group_by(code)

disaster_data <- Q3.1[Q3.1$region %in% c("South Asia", "East Asia", "North America"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6",
                      "goal7", "goal8", "goal9", "goal10", "goal11", "goal12",
                      "goal13", "goal15", "goal16", "total_affected",
                      "total_deaths")

subset_data <- disaster_data[, relevant_columns]

lagged_subset_data <- subset_data %>%
  mutate(
    lagged_total_affected = lag(total_affected, default = NA),
    lagged_total_deaths = lag(total_deaths, default = NA)
  )

correlation_matrix_lagged <-
  cor(lagged_subset_data[, c("lagged_total_affected", "lagged_total_deaths")],
      subset_data,
      method = "spearman")

cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")

ui <- fluidPage(
  titlePanel("Interactive Correlation Heatmap between the climate disasters and the SDG goals in South, East Asia and North America with 1 year gap"),
  plotlyOutput("heatmap"),
  sliderInput("year", "Select Year", min = 2000, max = 2021, value = 2012, step = 1),
  verbatimTextOutput("correlation_output"),
  actionButton("stopButton", "Stop application")
)

server <- function(input, output, session) {
  selected_data <- reactive({
    filtered_data <- disaster_data[disaster_data$year == input$year, ]
    subset_data <- filtered_data[, relevant_columns]
    lagged_subset_data <- subset_data %>%
      mutate(
        lagged_total_affected = lag(total_affected, default = NA),
        lagged_total_deaths = lag(total_deaths, default = NA)
      )
    
    correlation_matrix_lagged <- cor(lagged_subset_data[, c("lagged_total_affected", "lagged_total_deaths")], subset_data)
    
    cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
    names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")
    
    return(cor_melted_lagged)
  })
  
  output$heatmap <- renderPlotly({
    # Generate the Viridis colorscale
    viridis_scale <- viridis_pal(option = "D")(256)
    normalized_colors <- seq(0, 1, length.out = length(viridis_scale))
    viridis_colorscale <- setNames(as.list(viridis_scale), normalized_colors)
  
    # Convert to a format suitable for Plotly
    plotly_colorscale <- lapply(1:length(viridis_colorscale), function(i) {
      list(normalized_colors[i], viridis_colorscale[[i]])
    })
    p <- plot_ly(data = selected_data(),
                 x = ~Variable1,
                 y = ~Variable2,
                 z = ~Correlation, 
                 type = "heatmap",
                 colorscale = plotly_colorscale,
                 zmin = -1, zmax = 1)
    
    p <- p %>% layout(
      title = "",
      xaxis = list(title = ""),
      yaxis = list(title = ""),
      coloraxis = list(
        colorbar = list(
          title = "Correlation",  
          tickvals = c(-1, 0, 1),  
          ticktext = c("-1", "0", "1"),
          len = 5,
          thickness = 20,
          x = 0,
          xanchor = "left",
          ticks = "outside" 
        )
      )
    )
    return(p)
  })
  
  observeEvent(input$stopButton, {
    stopApp()  
  })
}
shinyApp(ui = ui, server = server)
```


```{r, eval = TRUE, echo = FALSE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(plotly)

Q3.1 <- Q3.1 %>%
  arrange(code, year) %>%
  group_by(code)

disaster_data <- Q3.1[Q3.1$region %in% c("South Asia", "East Asia", "North America"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "total_affected", "total_deaths")

subset_data <- disaster_data[, relevant_columns]

lagged_subset_data <- subset_data %>%
  mutate(
    lagged_total_affected = lag(total_affected, default = NA),
    lagged_total_deaths = lag(total_deaths, default = NA)
  )

correlation_matrix_lagged <- cor(lagged_subset_data[, c("lagged_total_affected", "lagged_total_deaths")], subset_data, method = "spearman")

cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")

ui <- fluidPage(
  titlePanel("Interactive Correlation Heatmap between the climate disasters and the SDG goals in South and East Asia with 1 year gap"),
  plotlyOutput("heatmap"),
  sliderInput("year", "Select Year", min = 2000, max = 2021, value = 2012, step = 1),
  verbatimTextOutput("correlation_output"),
  actionButton("stopButton", "Stop application")
)

server <- function(input, output, session) {
  selected_data <- reactive({
    filtered_data <- disaster_data[disaster_data$year == input$year, ]
    subset_data <- filtered_data[, relevant_columns]
    lagged_subset_data <- subset_data %>%
      mutate(
        lagged_total_affected = lag(total_affected, default = NA),
        lagged_total_deaths = lag(total_deaths, default = NA)
      )
    
    correlation_matrix_lagged <- cor(lagged_subset_data[, c("lagged_total_affected", "lagged_total_deaths")], subset_data)
    
    cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
    names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")
    
    return(cor_melted_lagged)
  })
  
  output$heatmap <- renderPlotly({
    # Generate the Viridis colorscale
    viridis_scale <- viridis_pal(option = "D")(256)
    normalized_colors <- seq(0, 1, length.out = length(viridis_scale))
    viridis_colorscale <- setNames(as.list(viridis_scale), normalized_colors)
  
    # Convert to a format suitable for Plotly
    plotly_colorscale <- lapply(1:length(viridis_colorscale), function(i) {
      list(normalized_colors[i], viridis_colorscale[[i]])
    })
    p <- plot_ly(data = selected_data(),
                 x = ~Variable1,
                 y = ~Variable2,
                 z = ~Correlation, 
                 type = "heatmap",
                 colorscale = plotly_colorscale,
                 zmin = -1, zmax = 1)
    
    p <- p %>% layout(
      title = "",
      xaxis = list(title = ""),
      yaxis = list(title = ""),
      coloraxis = list(
        colorbar = list(
          title = "Correlation",  
          tickvals = c(-1, 0, 1),  
          ticktext = c("-1", "0", "1"),
          len = 5,
          thickness = 20,
          x = 0,
          xanchor = "left",
          ticks = "outside" 
        )
      )
    )
    return(p)
  })
  
  observeEvent(input$stopButton, {
    stopApp()  
  })
}
shinyApp(ui = ui, server = server)
```

here you can see an interactive map of the correlation between COVID-19 and the SDG goals with 1 year gap. And strangely, instead of having a negative correlation, we expected that the more cases and deaths happened because of COVID-19, the scores of the SDG would be negatively affected,but with the gap year we can see that the scores of the Goal3, Goal6, Goal9 and Goal16 are quite positively impacted by the COVID-19.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(plotly)

Q3.2 <- Q3.2 %>%
  arrange(code,year)%>%
  group_by(code)

Q3.2 <- read.csv(here("scripts", "data", "data_question3_2.csv"))

covid_filtered <- Q3.2
relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "stringency", "cases_per_million", "deaths_per_million")

subset_data <- covid_filtered[, relevant_columns]

lagged_subset_data <- subset_data %>%
  mutate(
    lagged_stringency = lag(stringency, default = NA),
    lagged_cases_per_million = lag(cases_per_million, default = NA),
    lagged_deaths_per_million = lag(deaths_per_million, default = NA)
  )

correlation_matrix_lagged <-
  cor(lagged_subset_data[, c("lagged_stringency", "lagged_cases_per_million", "lagged_deaths_per_million")],
      subset_data,
      method = "spearman")

cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")


ui <- fluidPage(
  titlePanel("Interactive Correlation Heatmap between COVID and the SDG goal with one year gap"),
  plotlyOutput("heatmap"),
  sliderInput("year", "Select Year", min = 2020, max = 2022, value = 2020, step = 1),
  actionButton("stopButton", "Stop application")
)


server <- function(input, output, session) {
  selected_data <- reactive({
    filtered_data <- covid_filtered[covid_filtered$year == input$year, ]
    subset_data <- filtered_data[, relevant_columns]
    lagged_subset_data <- subset_data %>%
      mutate(
        lagged_stringency = lag(stringency, default = NA),
        lagged_cases_per_million = lag(cases_per_million, default = NA),
        lagged_deaths_per_million = lag(deaths_per_million, default = NA)
      )
    
    correlation_matrix_lagged <- cor(lagged_subset_data[, c("lagged_stringency", "lagged_cases_per_million", "lagged_deaths_per_million")], subset_data)
    
    cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
    names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")
    
    return(cor_melted_lagged)
  })
  
  output$heatmap <- renderPlotly({
    # Generate the Viridis colorscale
    viridis_scale <- viridis_pal(option = "D")(256)
    normalized_colors <- seq(0, 1, length.out = length(viridis_scale))
    viridis_colorscale <- setNames(as.list(viridis_scale), normalized_colors)
  
    # Convert to a format suitable for Plotly
    plotly_colorscale <- lapply(1:length(viridis_colorscale), function(i) {
      list(normalized_colors[i], viridis_colorscale[[i]])
    })
    p <- plot_ly(data = selected_data(),
                 x = ~Variable1,
                 y = ~Variable2,
                 z = ~Correlation, 
                 type = "heatmap",
                 colorscale = plotly_colorscale,
                 zmin = -1, zmax = 1)
            
    p <- p %>% layout(
      title = "",
      xaxis = list(title = "", tickfont = list(size = 16)),
      yaxis = list(title = "", tickfont = list(size = 16)),
      coloraxis = list(
        colorbar = list(
          title = "Correlation",
          tickvals = c(-1, 0, 1), 
          ticktext = c("-1", "0", "1"),
          len = 5, 
          thickness = 20, 
          x = 0,
          xanchor = "left", 
          ticks = "outside"
        )
      )
    )
    return(p)
  })
  
  observeEvent(input$stopButton, {
    stopApp()  
  })
}
shinyApp(ui = ui, server = server)
```

Finally, here you can see an interactive map of the correlation between respectively for the 3 different variables of the Conflict and the SDG goals with 1 year gap.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(plotly)
    
Q3.3 <- Q3.3 %>%
  arrange(code,year)%>%
  group_by(code)

conflicts_filtered <- Q3.3[Q3.3$region %in% c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "sum_deaths")

subset_data <- conflicts_filtered[, relevant_columns]

lagged_subset_data <- subset_data %>%
  mutate(
    lagged_sum_deaths = lag(sum_deaths, default = NA),
  )

correlation_matrix_lagged <- cor(lagged_subset_data[, c("sum_deaths")], subset_data, method = "spearman")

cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")

ui <- fluidPage(
  titlePanel("Interactive Correlation Heatmap between Conflicts Deaths in selected regions and the SDG goal with one year gap"),
  plotlyOutput("heatmap"),
  sliderInput("year", "Select Year", min = 2000, max = 2016, value = 2005, step = 1),
  actionButton("stopButton", "Stop application")
)

server <- function(input, output, session) {
  selected_data <- reactive({
    filtered_data <- conflicts_filtered[conflicts_filtered$year == input$year, ]
    subset_data <- filtered_data[, relevant_columns]
    lagged_subset_data <- subset_data %>%
      mutate(
        lagged_sum_deaths = lag(sum_deaths, default = NA))
    
    correlation_matrix_lagged <- cor(lagged_subset_data[, c("sum_deaths")], subset_data)
    
    cor_melted_lagged <- reshape2::melt(correlation_matrix_lagged)
    names(cor_melted_lagged) <- c("Variable2", "Variable1", "Correlation")
    
    return(cor_melted_lagged)
  })
  
  output$heatmap <- renderPlotly({
    viridis_scale <- viridis_pal(option = "D")(256)
    normalized_colors <- seq(0, 1, length.out = length(viridis_scale))
    viridis_colorscale <- setNames(as.list(viridis_scale), normalized_colors)
  
    plotly_colorscale <- lapply(1:length(viridis_colorscale), function(i) {
      list(normalized_colors[i], viridis_colorscale[[i]])
    })
    p <- plot_ly(data = selected_data(),
                 x = ~Variable1,
                 y = ~Variable2,
                 z = ~Correlation, 
                 type = "heatmap",
                 colorscale = plotly_colorscale,
                 zmin = -1, zmax = 1)
    
    p <- p %>% layout(
      title = "",
      xaxis = list(title = ""),
      yaxis = list(title = ""),
      coloraxis = list(
        colorbar = list(
          title = "Correlation",
          tickvals = c(-1, 0, 1), 
          ticktext = c("-1", "0", "1"), 
          len = 5,  
          thickness = 20,  
          x = 0,  
          xanchor = "left", 
          ticks = "outside" 
        )
      )
    )
    return(p)
  })
  
  observeEvent(input$stopButton, {
    stopApp() 
  })
}
shinyApp(ui = ui, server = server)
```

Here's the interactive map of the correlation between the affected population in conflicts and the SDG goals with 1 year gap.

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(plotly)

Q3.3 <- Q3.3 %>%
  arrange(code,year)%>%
  group_by(code)

conflicts_filtered <- Q3.3[Q3.3$region %in% c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Caucasus & Central Asia"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "pop_affected")

subset_data <- conflicts_filtered[, relevant_columns]

correlation_matrix_Conflicts_Pop_Aff <- cor(subset_data, subset_data[, c("pop_affected")])

cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Pop_Aff))
names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

ui <- fluidPage(
  titlePanel("Interactive Correlation Heatmap between population affected in conflicts in selected regions and the SDG goal with one year gap"),
  plotlyOutput("heatmap"),
  sliderInput("year", "Select Year", min = 2000, max = 2016, value = 2005, step = 1),
  actionButton("stopButton", "Stop application")
)

server <- function(input, output, session) {
  selected_conflicts_data <- reactive({
    filtered_data <- conflicts_filtered[conflicts_filtered$year == input$year, ]
    subset_data <- filtered_data[, relevant_columns]
    return(subset_data)
  })
  
  output$heatmap <- renderPlotly({
    correlation_matrix_Conflicts_Pop_Aff <- cor(selected_conflicts_data(), selected_conflicts_data()[, c("pop_affected")])
    cor_melted <- as.data.frame(as.table(correlation_matrix_Conflicts_Pop_Aff))
    names(cor_melted) <- c("Variable1", "Variable2", "Correlation")

    # Generate the Viridis colorscale
    viridis_scale <- viridis_pal(option = "D")(256)
    normalized_colors <- seq(0, 1, length.out = length(viridis_scale))
    viridis_colorscale <- setNames(as.list(viridis_scale), normalized_colors)
  
    # Convert to a format suitable for Plotly
    plotly_colorscale <- lapply(1:length(viridis_colorscale), function(i) {
      list(normalized_colors[i], viridis_colorscale[[i]])
    })
    
    p <- plot_ly(data = cor_melted, x = ~Variable1, y = ~Variable2, z = ~Correlation,
                 type = "heatmap", colorscale = plotly_colorscale,
                 zmin = -1, zmax = 1)
    
    p <- p %>% layout(
      title = "",
      xaxis = list(title = ""),
      yaxis = list(title = ""),
      coloraxis = list(
        colorbar = list(
          title = "Correlation",
          tickvals = c(-1, 0, 1), 
          ticktext = c("-1", "0", "1"), 
          len = 5,  
          thickness = 20,  
          x = 0,  
          xanchor = "left", 
          ticks = "outside" 
        )
      )
    )
    return(p)
  })
  
  observeEvent(input$stopButton, {
    stopApp() 
  })
}
shinyApp(ui = ui, server = server)
```

The results seems logic because if the SDG scores continue to go higher and the conflicts remains the same or finishes we get a negative correlation

Our last idea is to see the regressions between the SDG scores and the variables of each event that we thought interesting.

### Regressions between the SDG scores and the events variables.

- Regressions for each score depending of each variable in the disasters dataset (total_affected and total_deaths)

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

library(shiny)
library(dplyr)
library(ggplot2)
library(scales)

disaster_data <- Q3.1[Q3.1$region %in% c("South Asia", "East Asia", "North America"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "total_affected", "total_deaths")

subset_data <- disaster_data[, relevant_columns]

goal_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16")


ui <- fluidPage(
  titlePanel("SDG and Climate Disasters Regression Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("sdg", "Select SDG Goal:",
                  choices = goal_columns,
                  selected = goal_columns[1]),
      actionButton("stopButton", "Stop Rendering"),
      width = 3
    ),
    mainPanel(
      width = 9,
      plotOutput("regression_plot_affected"),
      plotOutput("regression_plot_deaths")
    )
  )
)

server <- function(input, output, session) {
  observeEvent(input$stopButton, {
    output$regression_plot_affected <- NULL
    output$regression_plot_deaths <- NULL
  })
  
  generate_regression_plot <- function(selected_goal) {
    formula_affected <- as.formula(paste(selected_goal, "~ total_affected"))
    formula_deaths <- as.formula(paste(selected_goal, "~ total_deaths"))
    
    lm_total_affected <- lm(formula_affected, data = subset_data)
    lm_total_deaths <- lm(formula_deaths, data = subset_data)
    
    plot_total_affected <- ggplot(subset_data, aes(x = total_affected, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Total Affected"),
           x = "Total Affected", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    plot_total_deaths <- ggplot(subset_data, aes(x = total_deaths, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Total Deaths"),
           x = "Total Deaths", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    
    list(plot_total_affected, plot_total_deaths)
  }
  
  output$regression_plot_affected <- renderPlot({
    req(input$sdg)
    isolate({
      selected_goal <- input$sdg
      generate_regression_plot(selected_goal)[[1]]
    })
  })
  
  output$regression_plot_deaths <- renderPlot({
    req(input$sdg)
    isolate({
      selected_goal <- input$sdg
      generate_regression_plot(selected_goal)[[2]]
    })
  })
}
shinyApp(ui, server)
```

- Regressions for each score depending of each variable in the COVID-19 dataset (stringency, cases_per_million and deaths_per_million).

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

covid_filtered <- Q3.2

relevant_columns <- c(
  "goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "stringency", "cases_per_million", "deaths_per_million"
)
subset_data <- covid_filtered[, relevant_columns]

goal_columns <- c(
  "goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16"
)

ui <- fluidPage(
  titlePanel("SDG - COVID Regression Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("sdg", "Select SDG Goal:",
                  choices = goal_columns,
                  selected = goal_columns[1]),
      actionButton("stopButton", "Stop Rendering"),
      width = 3
    ),
    mainPanel(
      width = 9,
      plotOutput("regression_plot_stringency"),
      plotOutput("regression_plot_cases"),
      plotOutput("regression_plot_deaths")
    )
  )
)

server <- function(input, output, session) {
  observeEvent(input$stopButton, {
    output$regression_plot_stringency <- NULL
    output$regression_plot_cases <- NULL
    output$regression_plot_deaths <- NULL
  })
  
  generate_regression_plot <- function(selected_goal) {
    formula_stringency <- as.formula(paste(selected_goal, "~ stringency"))
    formula_cases <- as.formula(paste(selected_goal, "~ cases_per_million"))
    formula_deaths <- as.formula(paste(selected_goal, "~ deaths_per_million"))
    
    lm_stringency <- lm(formula_stringency, data = subset_data)
    lm_cases <- lm(formula_cases, data = subset_data)
    lm_deaths <- lm(formula_deaths, data = subset_data)
    
    plot_stringency <- ggplot(subset_data, aes(x = stringency, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Stringency"),
           x = "Stringency", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) +
      theme(axis.title = element_text(size = 16), axis.text = element_text(size = 16), plot.title = element_text(size = 20))
    
    plot_cases <- ggplot(subset_data, aes(x = cases_per_million, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Cases per Million"),
           x = "Cases per Million", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) +
      theme(axis.title = element_text(size = 16), axis.text = element_text(size = 16), plot.title = element_text(size = 20))
    
    plot_deaths <- ggplot(subset_data, aes(x = deaths_per_million, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Deaths per Million"),
           x = "Deaths per Million", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) +
      theme(axis.title = element_text(size = 16), axis.text = element_text(size = 16),plot.title = element_text(size = 20))
    
    list(plot_stringency, plot_cases, plot_deaths)
  }
  
  output$regression_plot_stringency <- renderPlot({
    req(input$sdg)
    isolate({
      selected_goal <- input$sdg
      generate_regression_plot(selected_goal)[[1]]
    })
  })
  
  output$regression_plot_cases <- renderPlot({
    req(input$sdg)
    isolate({
      selected_goal <- input$sdg
      generate_regression_plot(selected_goal)[[2]]
    })
  })
  
  output$regression_plot_deaths <- renderPlot({
    req(input$sdg)
    isolate({
      selected_goal <- input$sdg
      generate_regression_plot(selected_goal)[[3]]
    })
  })
}

shinyApp(ui, server)
```


- Regressions for each SDG score depending of each variable in the Conflicts dataset (pop_affected and sum_deaths).

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = FALSE, out.width="100%"}

conflicts_filtered <- Q3.3[Q3.3$region %in% c("Middle East & North Africa", "Sub-Saharan Africa", "South Asia", "Latin America & the Caribbean", "Caucasus and Central Asia"), ]

relevant_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16", "pop_affected", "sum_deaths", "maxintensity")

subset_data <- conflicts_filtered[, relevant_columns]

goal_columns <- c("goal1", "goal2", "goal3", "goal4", "goal5", "goal6", "goal7", "goal8", "goal9", "goal10", "goal11", "goal12", "goal13", "goal15", "goal16"
)

ui <- fluidPage(
  titlePanel("SDG - Conflicts Regression Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("sdg", "Select SDG Goal:",
                  choices = goal_columns,
                  selected = goal_columns[1]),
      actionButton("stopButton", "Stop Rendering"),  # Adding a Stop button
      width = 3
    ),
    mainPanel(
      width = 9,
      plotOutput("regression_plot_affected"),
      plotOutput("regression_plot_deaths"),
      plotOutput("regression_plot_maxintensity")
    )
  )
)

server <- function(input, output, session) {
  observeEvent(input$stopButton, {
    output$regression_plot_affected <- NULL
    output$regression_plot_deaths <- NULL
    output$regression_plot_maxintensity <- NULL
  })
  
  generate_regression_plot <- function(selected_goal) {
    formula_pop_affected <- as.formula(paste(selected_goal, "~ pop_affected"))
    formula_sum_deaths <- as.formula(paste(selected_goal, "~ sum_deaths"))
    formula_maxintensity <- as.formula(paste(selected_goal, "~maxintensity"))
    
    lm_pop_affected <- lm(formula_pop_affected, data = subset_data)
    lm_sum_deaths <- lm(formula_sum_deaths, data = subset_data)
    lm_maxintensity <- lm(formula_maxintensity, data = subset_data)
    
    plot_pop_affected <- ggplot(subset_data, aes(x = pop_affected, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Population Affected"),
           x = "Population Affected", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) +
      theme(axis.title = element_text(size = 12), axis.text = element_text(size = 10))
    
    plot_sum_deaths <- ggplot(subset_data, aes(x = sum_deaths, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Sum of Deaths"),
           x = "Sum of Deaths", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    plot_maxintensity <- ggplot(subset_data, aes(x = maxintensity, y = !!as.name(selected_goal))) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      labs(title = paste("Regression plot for", selected_goal, "vs Maxintensity"),
           x = "Maxintensity", y = selected_goal) +
      scale_x_continuous(labels = comma_format()) 
    
    list(plot_pop_affected, plot_sum_deaths, plot_maxintensity)
  }
  
  output$regression_plot_affected <- renderPlot({
    req(input$sdg)
    isolate({
      selected_goal <- input$sdg
      generate_regression_plot(selected_goal)[[1]]
    })
  })
  
  output$regression_plot_deaths <- renderPlot({
    req(input$sdg)
    isolate({
      selected_goal <- input$sdg
      generate_regression_plot(selected_goal)[[2]]
    })
  })
  
  output$regression_plot_maxintensity <- renderPlot({
    req(input$sdg)
    isolate({
      selected_goal <- input$sdg
      generate_regression_plot(selected_goal)[[3]]
    })
  })
}

shinyApp(ui, server)
```
