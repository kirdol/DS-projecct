```{r echo = FALSE, message = FALSE}
#### Setup ####

# Running our setup script to load our packages
source(here::here("scripts","Clean","setup.R"))

# Import of our dataset for or question on the SDGs
data_4 <- read.csv(here("scripts", "data", "data_question24.csv"))
```

## Focus on the relationships among the SDGs
**How are the different SDGs linked? (We want to see if some SDGs are linked in the fact that a high score on one implies a high score on the other, and thus if we can make groups of SDGs that are comparable in that way).**

### EDA: General visualization of the SDGs

To better analyse the relationships between the SDGs, we will first visualize the correlation between the correlation between the SDGs with the help of a heatmap. We chose to set a threshold at |`r threshold_heatmap`| to concentrate our analysis on the most linked SDGs. We initially intended to use the Pearson correlation method, but our data is, as seen in previous chapter, not normally distributed. We tried to normalized our data through logarithmic or square root transformation, but it was not sufficient. For that reason, we chose to use th Spearman correlation. While not being an ideal method, the Spearman correlation does not require the data to be normally distributed.

To do that, we select only the columns of interest and compute the correlation matrix using Spearman correlation. We then melt the matrix to be able to plot it. We then plot the heatmap using `ggplot2`.

```{r echo = TRUE, message = FALSE, warning = FALSE}
#### Heatmap of the correlations ####

# Selecting columns of interest
data_4_goals <- data_4 %>%
  dplyr::select(overallscore, goal1, goal2, goal3, goal4, goal5,
                goal6, goal7, goal8, goal9, goal10, goal11, goal12,
                goal13, goal15, goal16, goal17)

# Initialize matrices for correlations, p-values, and significance
n <- ncol(data_4_goals)
cor_matrix <- matrix(1, n, n)
p_matrix <- matrix(NA, n, n)
colnames(cor_matrix) <- colnames(data_4_goals)
rownames(cor_matrix) <- colnames(data_4_goals)

# Calculating correlations and p-values
for (i in 1:n) {
  for (j in 1:n) {
    if (i != j) {
      test <- cor.test(data_4_goals[[i]], data_4_goals[[j]], method = "spearman")
      cor_matrix[i, j] <- test$estimate
      p_matrix[i, j] <- test$p.value}}}

# print(cor_matrix)
# All correlation are significant from 0 at alpha = 0.05

# Melting the data for ggplot
melted_corr <- melt(cor_matrix)

# Creating the heatmap
ggplot(melted_corr, aes(x = Var1,
                        y = Var2, 
                        fill = value)) +
    geom_tile() +
    geom_text(aes(label = ifelse(abs(value) > threshold_heatmap,
                                 sprintf("%.2f", value),
                                 "")), 
              vjust = 0.5,
              size = 2.5) +
    scale_fill_viridis_c(name = "Spearman\nCorrelation",
                         begin = 0.15) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45,
                                     hjust = 1)) +
    labs(title = paste("Heatmap of Spearman Correlations \n(Only correlation values higher ",
                       threshold_heatmap,
                       " are shown)",
                       sep = ""),
         x = "",
         y = "")
```

The correlation can be read on the graph. The darker the color, the stronger the correlation. If the correlation value is not shown, it means that the goals correlation does not exceed our threshold of Â±`r threshold_heatmap`.

It is evident that the Sustainable Development Goals (SDGs) are intricately interconnected. However, certain goals seems to be less interrelated compared to others. We can see that SDG 1 (No Poverty) and SDG 10 (Reduced Inequalities) have a weaker correlation with the rest of the goals. Similarly, Goal 15 (Life on Land) also have a weacker interconnection with the other SDGs. It is also interesting to note that some goals are negatively correlated with others. For instance, based on the Spearman correlation, goal 12 (Responsable Consumption and Production) and goal 13 (Climate Action) are negatively correlated with the others goals. This suggest that when the higher a goal other than goal 12 or 13 is, the lower the goals 12 and 13 are. Given their similar nature, it is not surprising that they are highly correlated with each other.

### Analysis: Factor analysis and Stepwise regression applied to the SDGs

At this point, we saw that the goals were mostly correlated. We now want to see if we can group them in a smaller number of factors. To do that, we will use a principal component analysis (PCA). We will first look at the scree plot to see how many factors we should keep. We will then look at the biplot to see how the goals are grouped together.

```{r echo = TRUE, message = FALSE}
#### Scree Plot ####

# Selecting only the goals columns and renaming them
goals_data <- data_4 %>%
  dplyr::select(goal1, goal2, goal3, goal4, goal5,
                goal6,goal7, goal8, goal9, goal10, goal11, goal12,
                goal13, goal15, goal16, goal17) %>%
  rename(G1 = goal1, G2 = goal2, G3 = goal3, G4 = goal4, G5 = goal5,
         G6 = goal6, G7 = goal7, G8 = goal8, G9 = goal9, G10 = goal10,
         G11 = goal11, G12 = goal12, G13 = goal13, G15 = goal15,
         G16 = goal16, G17 = goal17)

# Scaling the data and running PCA
goals_data_scaled <- scale(goals_data)
pca_result <- prcomp(goals_data_scaled)

# Plotting Scree plot to visualize the importance of each principal component
fviz_eig(pca_result,
         addlabels = TRUE,
         linecolor = viridis(1,
                             option = "B",
                             begin = 0.5),
         barcolor = "black",
         barfill = Fix_color) +
  ggtitle("                                          PCA - Scree plot") +
  theme_minimal()

# getting the eigenvalues
eigenvalues <- pca_result$sdev^2
```

We see clearly that the first component is the most important one. Guided by the Kaiser criterion, which advises retaining only those components with eigenvalues exceeding 1, the initial three components emerge as candidates with the third components having a eigenvalue of `r eigenvalues[3]`. We now want to see how those our two first components look on in a biplot.

```{r echo = TRUE, message = FALSE}
#### Biplot ####

# Plotting Biplot to visualize the two main dimensions
fviz_pca_biplot(pca_result,
                label = "var",
                col.var = Fix_color,
                geom = "point",
                pointsize = 0.1,
                labelsize = 3) + 
  ggtitle("                                           PCA - Biplot") +
  theme_minimal()
```

The biplot offers an interesting visualization that clearly illustrate the relationship between the various goals and the first two components. We can see that the second dimension is mostly correlated with Goals 10 (Reduced inequalities) and 15 (Life on Land). The rest of the variables are more correlated with Dimension 1. With the biplot, we can see three disinct groups of variables, each playing a unique role. We see a group that regroup Goals 12 (Responsible Consumption and Production) and 13 (Climate Action). It is not a surprise to see that they are in the opposite direction from the rest of the variable. This comportment is due to the negative correlation between them and the rest of the variables as discussed previously. Both depicte environmental issues. We also see a group that regroup Goals 10 (Reduced inequalities) and 15 (Life on Land) which is suprising. To group the goal that treat the inequalities (goal 10) and the goal that concern the life on land (goal 15) does not make any sense. The last group regroup the rest of the variables. This categorization helps to understand the distinct influences and interactions between the goals.

We also performed a stepwise regression trying to see more precisely how the goals are correlated with each other. We use the forward selection with the `leaps` package to do so.

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Stepwise regression ####

# Selecting only the goals and overallscore columns
goals_data <- data_4 %>% # Selecting only the columns needed
  dplyr::select(overallscore, goal1, goal2, goal3, goal4, goal5,
                goal6,goal7, goal8, goal9, goal10, goal11, goal12,
                goal13, goal15, goal16, goal17)

# Performing a stepwise regression trying to explain each variables with the others
leaps_o <- regsubsets(overallscore ~ goal1 + goal2 + goal3 + goal4 + goal5 +
                        goal6 + goal7 + goal8 + goal9 + goal10 + goal11 +
                        goal12 + goal13 + goal15 + goal16 + goal17,
                      data = goals_data, nbest=1, method = "forward")
leaps_1 <- regsubsets(goal1 ~ goal2 + goal3 + goal4 + goal5 + goal6 + goal7 +
                        goal8 + goal9 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_2 <- regsubsets(goal2 ~ goal1 + goal3 + goal4 + goal5 + goal6 + goal7 +
                        goal8 + goal9 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_3 <- regsubsets(goal3 ~ goal1 + goal2 + goal4 + goal5 + goal6 + goal7 +
                        goal8 + goal9 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_4 <- regsubsets(goal4 ~ goal1 + goal2 + goal3 + goal5 + goal6 + goal7 +
                        goal8 + goal9 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_5 <- regsubsets(goal5 ~ goal1 + goal2 + goal3 + goal4 + goal6 + goal7 +
                        goal8 + goal9 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_6 <- regsubsets(goal6 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal7 +
                        goal8 + goal9 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_7 <- regsubsets(goal7 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                        goal8 + goal9 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_8 <- regsubsets(goal8 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                        goal7 + goal9 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_9 <- regsubsets(goal9 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                        goal7 + goal8 + goal10 + goal11 + goal12 + goal13 +
                        goal15 + goal16 + goal17, data = goals_data, nbest=1,
                      method = "forward")
leaps_10 <- regsubsets(goal10 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                         goal7 + goal8 + goal9 + goal11 + goal12 + goal13 +
                         goal15 + goal16 + goal17, data = goals_data, nbest=1,
                       method = "forward")
leaps_11 <- regsubsets(goal11 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                         goal7 + goal8 + goal9 + goal10 + goal12 + goal13 +
                         goal15 + goal16 + goal17, data = goals_data, nbest=1,
                       method = "forward")
leaps_12 <- regsubsets(goal12 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                         goal7 + goal8 + goal9 + goal10 + goal11 + goal13 +
                         goal15 + goal16 + goal17, data = goals_data, nbest=1,
                       method = "forward")
leaps_13 <- regsubsets(goal13 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                         goal7 + goal8 + goal9 + goal10 + goal11 + goal12 +
                         goal15 + goal16 + goal17, data = goals_data, nbest=1,
                       method = "forward")
leaps_15 <- regsubsets(goal15 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                         goal7 + goal8 + goal9 + goal10 + goal11 + goal12 +
                         goal13 + goal16 + goal17, data = goals_data, nbest=1,
                       method = "forward")
leaps_16 <- regsubsets(goal16 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                         goal7 + goal8 + goal9 + goal10 + goal11 + goal12 +
                         goal13 + goal15 + goal17, data = goals_data, nbest=1,
                       method = "forward")
leaps_17 <- regsubsets(goal17 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 +
                         goal7 + goal8 + goal9 + goal10 + goal11 + goal12 +
                         goal13 + goal15 + goal16, data = goals_data, nbest=1,
                       method = "forward")
```

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Regression found with stepwise regression ####

# Getting all the linear models from the stepwise regression
mod_o <- lm(
  overallscore ~ goal2 + goal3 + goal4 + goal6 + goal7 + goal10 + goal15 + goal17,
  data = goals_data)
mod_1 <- lm(
  goal1 ~ goal3 + goal4 + goal5 + goal6 + goal7 + goal9 + goal13 + goal17,
  data = goals_data)
mod_2 <- lm(
  goal2 ~ goal4 + goal5 + goal6 + goal8 + goal9 + goal12 + goal16 + goal17,
  data = goals_data)
mod_3 <- lm(
  goal3 ~ goal1 + goal4 + goal7 + goal8 + goal9 + goal11 + goal15 + goal16,
  data = goals_data)
mod_4 <- lm(
  goal4 ~ goal1 + goal2 + goal3 + goal5 + goal7 + goal11 + goal16 + goal17,
  data = goals_data)
mod_5 <- lm(
  goal5 ~ goal1 + goal4 + goal6 + goal9 + goal10 + goal11 + goal15 + goal17,
  data = goals_data)
mod_6 <- lm(
  goal6 ~ goal1 + goal2 + goal3 + goal5 + goal8 + goal9 + goal11 + goal15,
  data = goals_data)
mod_7 <- lm(
  goal7 ~ goal1 + goal3 + goal4 + goal5 + goal6 + goal8 + goal11 + goal13,
  data = goals_data)
mod_8 <- lm(
  goal8 ~ goal2 + goal5 + goal6 + goal9 + goal10 + goal12 + goal15 + goal17,
  data = goals_data)
mod_9 <- lm(
  goal9 ~ goal1 + goal2 + goal3 + goal8 + goal10 + goal12 + goal13 + goal17,
  data = goals_data)
mod_10 <- lm(
  goal10 ~ goal1 + goal5 + goal9 + goal11 + goal13 + goal15 + goal16 + goal17,
  data = goals_data)
mod_11 <- lm(
  goal11 ~ goal3 + goal4 + goal5 + goal6 + goal7 + goal10 + goal15 + goal16,
  data = goals_data)
mod_12 <- lm(
  goal12 ~ goal2 + goal7 + goal8 + goal9 + goal13 + goal15 + goal16 + goal17,
  data = goals_data)
mod_13 <- lm(
  goal13 ~ goal1 + goal5 + goal7 + goal9 + goal10 + goal12 + goal15 + goal16,
  data = goals_data)
mod_15 <- lm(
  goal15 ~ goal3 + goal4 + goal5 + goal6 + goal10 + goal11 + goal12 + goal13,
  data = goals_data)
mod_16 <- lm(
  goal16 ~ goal2 + goal3 + goal4 + goal10 + goal11 + goal12 + goal13 + goal17,
  data = goals_data)
mod_17 <- lm(
  goal17 ~ goal1 + goal5 + goal8 + goal9 + goal10 + goal11 + goal12 + goal16,
  data = goals_data)
```

Below, we create a graph to present our different model that the stepwise regression chose based on the $R^2\:adjusted$ as best regression for each of our goals. The $R^2\:adjusted$ measure the quality of the models and takes into account the number of dependent variables. As expected, the model that explain the variable overallscore is explained by the other goals at a similar coefficient for each of our goals. This make sense since the overallscore has been directly calculated with the 17 scores. We can see that none of the goals seems to be more used in the regression that the others. And that none of our explanatory variables received a high coefficient.

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Graph of the different models ####

# Create a dataframe with our selected models
model_list <-
  list(mod_o, mod_1, mod_2, mod_3, mod_4, mod_5, mod_6, mod_7, mod_8, mod_9,
       mod_10, mod_11, mod_12, mod_13, mod_15, mod_16, mod_17)

# Create a dataframe with the coefficients of our models
models_tidy <-
  lapply(model_list, tidy)

# Rename the colums to be able to print them afterword on the graph
names(models_tidy) <-
  c("Overallscore ~ others", "Goal1 ~ others", "Goal2 ~ others",
    "Goal3 ~ others", "Goal4 ~ others", "Goal5 ~ others", "Goal6 ~ others",
    "Goal7 ~ others", "Goal8 ~ others", "Goal9 ~ others", "Goal10 ~ others",
    "Goal11 ~ others", "Goal12 ~ others", "Goal13 ~ others", "Goal15 ~ others",
    "Goal16 ~ others", "Goal17 ~ others")

# Combine into a single dataframe
df_tidy <-
  do.call(rbind,
          lapply(names(models_tidy),
                 function(x) cbind(models_tidy[[x]], Model=x)))

# Assuming 'p.value' is the column name for p-values in your dataframe
significance_level <- 0.05

# Filter for significant p-values
df_tidy_significant <-
  df_tidy[df_tidy$p.value < significance_level, ]

# Plot graph with all models
ggplot(df_tidy_significant,
       aes(x = Model,
           y = estimate,
           color = term)) +
  geom_point() +
  geom_errorbar(aes(ymin = estimate - std.error,
                    ymax = estimate + std.error),
                width = 0.2) +
  ylim(-1, 1) +
  theme(axis.text.x = element_text(angle = 45,
                                   hjust = 1),
        legend.position = "right",
        legend.text = element_text(size = 5),
        legend.title = element_text(size = 7),
        legend.key.size = unit(0.3, "cm")) +
  labs(title = "Coefficient Plot of Regression Models",
       x = "Models",
       y = "Estimates") +
  colors_pal
```

The following graphs show the Residuals versus our fitted values for our model that explained the overallscore and the goal 9. Let's first look at the model that explain the best the Overallscore variable:

$$
\begin{split}
Overallscore\sim \beta_0 &+ Goal~2*\beta_1 + Goal~3*\beta_2 + Goal~4*\beta_3 + Goal~6*\beta_4 \\ &+ Goal~7*\beta_5 + Goal~10*\beta_6 + Goal~15*\beta_7 + Goal~17*\beta_8
\end{split}
$$

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Residuals vs Fitted plot for overallscore ####

# Overallscore ~ others variables
ggplot(mod_o,
       aes(x = .fitted,
           y = .resid)) +
  geom_point(aes(color = abs(.resid)),
             size = 0.5) +
  scale_color_viridis_c(name = "Residuals",
                        option = "D") +
  geom_hline(yintercept = 0,
             linetype = 2,
             size = 0.6) +
  xlab("Fitted Values") +
  ylab("Residuals") +
  ggtitle("Residuals vs. Fitted Plot (Overallscore ~ others variables)") +
  geom_smooth(se = FALSE,
              size = 0.75,
              span = 0.95,
              method = "loess",
              color = viridis(1,
                             option = "B",
                             begin = 0.5)) +
  theme_minimal() +
  theme(legend.position = "none")
```

As the we now from the nature of the overallscore variable. It has been calculated using the 17 goal scores. Hence, the stepwise regression did not struggle to find a model with good results. The $R^2\:adjusted$ of 0.98 of this model suggest that the model is good quality. As we can see in the first graph, the residuals vs. fitted plot also suggest a good quality. The residuals are well distributed around 0, the residual and the red line, representing the mean residual, is almost flat and very close to 0. Let's now look at the model that according to our stepwise regression, is the best model at explaining our goal 9 scores with a $R^2\:adjusted$ of 0.81 but in reality that does not perform well according to the residual versus fitted plot. The predicted model looks as follow:

$$
\begin{split}
Goal~9\sim \beta_0 &+ Goal~1*\beta_1 + Goal~2*\beta_2 + Goal~3*\beta_3 + Goal~8*\beta_4 \\ &+ Goal~10*\beta_5 + Goal~12*\beta_6 + Goal~15*\beta_7 + Goal~17*\beta_8
\end{split}
$$

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Residuals vs Fitted plot for goal 9 ####

# Goal 9 ~ others variables
ggplot(mod_9,
       aes(x = .fitted,
           y = .resid)) +
  geom_point(aes(color = abs(.resid)),
             size = 0.5) +
  scale_color_viridis_c(name = "Residuals",
                        option = "D") +
  geom_hline(yintercept = 0,
             linetype = 2,
             size = 0.6) +
  xlab("Fitted Values") +
  ylab("Residuals") +
  ggtitle("Residuals vs. Fitted Plot (Goal 9 ~ others variables)") +
  geom_smooth(se = FALSE,
              size = 0.75,
              span = 0.95,
              method = "loess",
              color = viridis(1,
                             option = "B",
                             begin = 0.5)) +
  theme_minimal() +
  theme(legend.position = "none")
```

As we can see in the graph, the model that tried to explain goal 9 is not as good. The mean residual is not flat and vary a lot. This could suggest non-linearity.

To conclude this part, we have seen some interesting relationships between the SDGs scores. We found that if a country is performing well in some goals, it does not necessary mean that it will perform well in the others. Some goals are negatively correlated. We then interested our-self on regrouping some goals together with a principal components analysis and we found that the analysis suggested to regroup some goals that at first sight, would not have been regrouped together. We also performed some stepwise regression to see how thw individual goals could be explained by the other and found that in general the model does not select all variables to explain the given goals. This comes from the high correlation between some goals.
