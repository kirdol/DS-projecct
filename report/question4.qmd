```{r test, echo = FALSE, message = FALSE}
source(here::here("scripts/Clean/setup.R"))
```

### Focus on relationship between SDGs
**How are the different SDGs linked? (We want to see if some SDGs are linked in the fact that a high score on one implies a high score on the other, and thus if we can make groups of SDGs that are comparable in that way).**

## Focus on relationship between SDGs
```{r echo=FALSE, message=FALSE}
#### Setup ####
source(here::here("scripts","Clean","setup.R"))
threashold_heatmap <- 0.5
```

Let's analyse our relationship between the SDGs. For that, we'll import our dataset to examine the interconnections among the Sustainable Development Goals (SDGs). After importing, we'll focus specifically on the columns representing the goals of interest. To provide a comprehensive analysis, we will construct a correlation matrix, highlighting only those goals where the correlation coefficient is either greater than `r threashold_heatmap` (indicating a strong positive relationship) or less than -`r threashold_heatmap` (signifying a strong negative relationship). This approach will enable us to identify and analyze the most significant relationships between the selected SDGs.

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Preparation of the data ####
data_4 <- read.csv(here::here("scripts", "data", "data_question24.csv"))
data_4_goals <- data_4[, grepl("goal", names(data_4))]
```

Given that our variables do not follow a normal distribution, employing the Pearson correlation method is not suitable in our analysis. We attempted to normalize the data through logarithmic and square root transformations, but these adjustments were insufficiently effective. Consequently, we will resort to computing the Spearman correlation. While not ideal, this method does not necessitate the normal distribution of our data. In our analysis, particularly for the heatmap visualization, we will focus on correlations that exceed the threshold of r threshold_heatmap or fall below -r threshold_heatmap. This selective approach will enhance the readability and interpretability of the heatmap.

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Spearman Correlation ####
spearman_corr_4 <- cor(data_4_goals, method = "spearman", use = "everything")
spearman_corr_4[abs(spearman_corr_4) < threashold_heatmap] <- NA
```

We can then plot the Heatmap of the Spearman correlation using the `ggplot2` package.

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Spearman Correlation Heatmap ####

# Melting the data
melted_corr_4 <- melt(spearman_corr_4, na.rm = TRUE)

# Creating the heatmap
ggplot(data = melted_corr_4, aes(x = Var1, y = Var2, fill = value)) +
    geom_tile() +
    geom_text(aes(label = sprintf("%.2f", value)), vjust = 0.5, size=2.5) + # Adding text
    scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                         midpoint = 0, limit = c(-1,1), space = "Lab", 
                         name="Spearman\nCorrelation",
                         na.value = "grey") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Heatmap of Spearman Correlations for Goals", 
         x = "", y = "")
```

It is evident that the Sustainable Development Goals (SDGs) are intricately interconnected. However, certain goals appear to be less interrelated compared to others. Specifically, SDG 1 (No Poverty) and SDG 10 (Reduced Inequalities) demonstrate a weaker correlation with the rest of the goals. Similarly, Goal 15 (Life on Land) also exhibits a lesser degree of interconnection with the other SDGs.

```{r Scree Plot and Biplot, echo = TRUE, message = FALSE, warning=FALSE}
# Selecting only numeric columns, assuming they are named as 'goal1', 'goal2', etc.
goals_data <- data_4_goals[, grep('goal', names(data_4_goals))]
goals_data_scaled <- scale(goals_data) # Scaling the data
pca_result <- prcomp(goals_data_scaled) # Running PCA

# Plotting Scree plot to visualize the importance of each principal component
fviz_eig(pca_result,
         addlabels = TRUE) +
  theme_minimal()

# Plotting Biplot to visualize the two main PCs
fviz_pca_biplot(pca_result,
                label="var",
                col.var="dodgerblue3",
                geom="point",
                pointsize = 0.1,
                labelsize = 5) +
  theme_minimal()
```

In our EDA on the focus on the influence of the factors over the SDG scores, we had made a correlation matrix heatmap that took into account every variable of our dataset. Here, we tried to zoom on certain parts of the heatmap. We have decided to add on our graphs the correlations between variables when our pvalue was significant (alpha = 0.05). The grey zones are concerning our non-significant pvalues.



///////////////////////////////////////////////////////////////////////

```{r, echo = TRUE, message = FALSE, warning=FALSE, cache = TRUE}
#### Forward selection ####

library(MASS)
clean_data <- na.omit(data_4)
# Initialize variables to store the results
step_results <- data.frame(step = integer(), aic = numeric(), adjusted_r_squared = numeric())

# Initial model (null model)
current_model <- lm(overallscore ~ 1, data = clean_data)

# Record initial metrics
step_results <- rbind(step_results, data.frame(step = 0, aic = AIC(current_model), adjusted_r_squared = summary(current_model)$adj.r.squared))

# Perform forward selection
for (variable in colnames(clean_data)[grepl("goal", colnames(clean_data))]) {
    current_model <- update(current_model, paste(". ~ . +", variable))
    current_step <- nrow(step_results) + 1
    step_results <- rbind(step_results, data.frame(step = current_step, aic = AIC(current_model), adjusted_r_squared = summary(current_model)$adj.r.squared))
}

ggplot(step_results, aes(x = step)) +
    geom_line(aes(y = aic, color = "AIC")) +
    geom_line(aes(y = adjusted_r_squared * 100, color = "Adjusted R-squared")) +
    labs(title = "Forward Selection Process", x = "Step", y = "Metric Value") +
    scale_color_manual("", breaks = c("AIC", "Adjusted R-squared"), values = c("blue", "red"))

```


data <- read.csv(here("scripts","data","data_question1.csv"))
summary(data)

