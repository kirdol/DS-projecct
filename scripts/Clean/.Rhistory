x1 = 2015,
y0 = 0,
y1 = 1,
yref = 'paper',
line = list(color = 'grey', width = 2, dash = 'dot')
)
),
updatemenus = list(
list(
buttons = list(
list(
args = list("y", list(
~fitted(lm(overallscore ~ year, data = data_after_2015)),
~fitted(lm(overallscore ~ year, data = data_before_2016))
)),
label = "Overall score",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal1 ~ year, data = data_after_2015)),
~fitted(lm(goal1 ~ year, data = data_before_2016))
)),
label = "Goal 1",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal2 ~ year, data = data_after_2015)),
~fitted(lm(goal2 ~ year, data = data_before_2016))
)),
label = "Goal 2",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal3 ~ year, data = data_after_2015)),
~fitted(lm(goal3 ~ year, data = data_before_2016))
)),
label = "Goal 3",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal4 ~ year, data = data_after_2015)),
~fitted(lm(goal4 ~ year, data = data_before_2016))
)),
label = "Goal 4",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal5 ~ year, data = data_after_2015)),
~fitted(lm(goal5 ~ year, data = data_before_2016))
)),
label = "Goal 5",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal6 ~ year, data = data_after_2015)),
~fitted(lm(goal6 ~ year, data = data_before_2016))
)),
label = "Goal 6",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal7 ~ year, data = data_after_2015)),
~fitted(lm(goal7 ~ year, data = data_before_2016))
)),
label = "Goal 7",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal8 ~ year, data = data_after_2015)),
~fitted(lm(goal8 ~ year, data = data_before_2016))
)),
label = "Goal 8",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal9 ~ year, data = data_after_2015)),
~fitted(lm(goal9 ~ year, data = data_before_2016))
)),
label = "Goal 9",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal10 ~ year, data = data_after_2015)),
~fitted(lm(goal10 ~ year, data = data_before_2016))
)),
label = "Goal 10",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal11 ~ year, data = data_after_2015)),
~fitted(lm(goal11 ~ year, data = data_before_2016))
)),
label = "Goal 11",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal12 ~ year, data = data_after_2015)),
~fitted(lm(goal12 ~ year, data = data_before_2016))
)),
label = "Goal 12",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal13 ~ year, data = data_after_2015)),
~fitted(lm(goal13 ~ year, data = data_before_2016))
)),
label = "Goal 13",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal15 ~ year, data = data_after_2015)),
~fitted(lm(goal15 ~ year, data = data_before_2016))
)),
label = "Goal 15",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal16 ~ year, data = data_after_2015)),
~fitted(lm(goal16 ~ year, data = data_before_2016))
)),
label = "Goal 16",
method = "restyle"
),
list(
args = list("y", list(
~fitted(lm(goal17 ~ year, data = data_after_2015)),
~fitted(lm(goal17 ~ year, data = data_before_2016))
)),
label = "Goal 17",
method = "restyle"
)
)
)
)
)
graph1
# Simple linear regression of the overall score on the difference in SDG scores variables "after2015"
reg2.1 <- lm(diff_overallscore ~ after2015, data=binary2015)
summary(reg2.1)
# Simple linear regression of the overall score on the difference in SDG scores variables "after2015"
reg2.1 <- lm(diff_overallscore ~ after2015, data=binary2015)
reg2.1.1 <- lm(diff_goal1 ~ after2015, data=binary2015)
reg2.1.2 <- lm(diff_goal2 ~ after2015, data=binary2015)
huxreg(reg2.1, reg2.1.1, reg2.1.2)
huxreg(reg2.1, reg2.1.1, reg2.1.2,
custom.model.names = c("Overall score", "Goal 1", "Goal 2"))
# Simple linear regression of the overall score on the difference in SDG scores variables "after2015"
reg2.1 <- lm(diff_overallscore ~ after2015, data=binary2015)
reg2.1.1 <- lm(diff_goal1 ~ after2015, data=binary2015)
reg2.1.2 <- lm(diff_goal2 ~ after2015, data=binary2015)
summary(reg2.1)
library(huxtable)
huxreg(reg2.1, reg2.1.1, reg2.1.2,
custom.model.names = c("Overall score", "Goal 1", "Goal 2"))
models <- list(reg2.1, reg2.1.1, reg2.1.2)
# Set custom model names
custom_model_names <- c("Overall score", "Goal 1", "Goal 2")
setModelNames(models, custom_model_names)
# Display the huxreg
huxreg(models)
models <- list(reg2.1, reg2.1.1, reg2.1.2)
# Set custom model names
custom_model_names <- c("Overall score", "Goal 1", "Goal 2")
setModelNames(models, custom_model_names)
# Create a custom table
custom_table <- screenreg(models)
# Display the table
print(custom_table)
stargazer(reg2.1, reg2.1.1, reg2.1.2,
title="Impact of the 2015 adoption of SDG by the UN",
type='html',
column.labels=c("Overall score", "Goal 1", "Goal2"),
digits=3)
# Simple linear regression of the overall score on the difference in SDG scores variables "after2015"
reg2.1 <- lm(diff_overallscore ~ after2015, data=binary2015)
reg2.1.1 <- lm(diff_goal1 ~ after2015, data=binary2015)
reg2.1.2 <- lm(diff_goal2 ~ after2015, data=binary2015)
stargazer(reg2.1, reg2.1.1, reg2.1.2,
title="Impact of the 2015 adoption of SDG by the UN",
type='html',
column.labels=c("Overall score", "Goal 1", "Goal2"),
digits=3)
library(plm)
# Create a panel data object
panel_data <- pdata.frame(binary2015, index = c("country", "year"))
# Run the difference-in-differences model to take into account the general evolution over the years
reg2.2 <- plm(diff_overallscore ~ after2015 + year + after2015:year,
data = panel_data,
model = "within")
summary(reg2.2)
install.packages("stargazer")
library(stargazer)
install.packages("stargazer")
library(stargazer)
# taking into account the years in a multiple regression
reg2.3 <- lm(diff_overallscore ~ after2015 + as.factor(year), data=binary2015)
summary(reg2.3)
# controlling for the region
reg2.3 <- plm(diff_overallscore ~ after2015 + year + after2015:year + region,
data = panel_data,
model = "within")summary(reg2.3)
# controlling for the region
reg2.3 <- plm(diff_overallscore ~ after2015 + year + after2015:year + region,
data = panel_data,
model = "within")
library(plm)
# controlling for the region
reg2.3 <- plm(diff_overallscore ~ after2015 + year + after2015:year + region,
data = panel_data,
model = "within")
summary(reg2.3)
rmarkdown::render("question2.Rmd")
source(here("scripts","Clean","setup.R"))
# load the required packages and install them if they are not.
packages <- c(
"here", # for the project's organization
"tidyverse", # for wrangling
"ggrepel", "gghighlight", "patchwork", "maps", "scales", # for plotting
"stringr",
"tidyr",
"lubridate",
"gridExtra",
"readr",
"readxl",
"ggplot2",
"countrycode",
"stringi",
"forecast",
"tibble",
"reshape2",
"corrplot",
"stargazer",
"tinytex",
"cowplot",
"sf",
"dplyr",
"rnaturalearth",
"knitr",
"kableExtra",
"DT",
"FactoMineR",
"factoextra",
"dplyr",
"visdat",
"huxtable",
"plm",
"plotly",
"stargazer"
)
for (pkg in packages) {
if (!pkg %in% installed.packages()) {
install.packages(pkg)}}
for (pkg in packages) {
library(pkg, character.only = TRUE)}
# Import merged database
all_Merge <- read.csv(here("scripts","data","all_Merge.csv"))
goal_vars <- all_Merge %>%
select(starts_with("goal")) %>%
filter_all(all_vars(!is.na(.))) %>%
colnames()
# Create a new column "Goals without NAs" in the data frame
to_plot_missing <- all_Merge %>%
mutate(Goals_without_NAs = rowSums(!is.na(select(., all_of(goal_vars))))) %>%
select(-c(goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal11, goal12, goal13, goal15, goal16, goal17))
# Now, you can use the `vis_dat` function with the updated data frame
vis_dat(to_plot_missing, warn_large_data = FALSE) + scale_fill_brewer(palette = "Paired")
# subset of data
# for question 1: factors (only until 2020 because no information for freedom index after)
data_question1 <- all_Merge %>% filter(year<=2020) %>% select(-c(total_deaths, no_injured, no_affected, no_homeless, total_affected, total_damages, cases_per_million, deaths_per_million, stringency, ongoing, sum_deaths, pop_affected, area_affected, maxintensity))
# for question 2 and 4: time and relationship between SDGs
data_question24 <- all_Merge %>% select(c(code, year, country, continent, region, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal17))
# for question 3: events
# Disasters (only until 2021 because no information for disasters after)
data_question3_1 <- all_Merge %>% filter(year<=2021) %>% select(c(code, year, country, continent, region, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal7, total_deaths, no_injured, no_affected, no_homeless, total_affected, total_damages))
# COVID
data_question3_2 <- all_Merge %>% select(c(code, year, country, continent, region, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal7, cases_per_million, deaths_per_million, stringency))
# Conflicts (only until 2016 because no information for conflicts after)
data_question3_3 <- all_Merge %>% filter(year<=2016) %>% select(c(code, year, country, continent, region, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal7, ongoing, sum_deaths, pop_affected, area_affected, maxintensity))
#### Question1
data_question1 <- data_question1 %>% select(-X)
library(UpSetR)
gg_miss_upset(data_question1)
UpSetR::gg_miss_upset(data_question1)
upset(data_question1)
upset(fromList(data_question1), order.by = "freq")
UpSetR::gg_miss_upset(data_question1)
gg_miss_upset <- function(data, order.by = "freq", ...){
data %>%
as_shadow_upset() %>%
UpSetR::upset(order.by = order.by,
...)
}
gg_miss_upset(data_question1)
gg_miss_upset <- function(data, order.by = "freq", ...){
data %>%
as_shadow_upset() %>%
UpSetR::upset(order.by = order.by,
...)
}
variable_names <- names(data_question1)
library(UpSetR)
gg_miss_upset(data_question1)
library(UpSetR)
gg_miss_upset(data_question1)
#############################################
## The following loads the needed packages ##
#############################################
# load the required packages and install them if they are not.
packages <- c(
"here", # for the project's organization
"tidyverse", # for wrangling
"ggrepel", "gghighlight", "patchwork", "maps", "scales", # for plotting
"stringr",
"tidyr",
"lubridate",
"gridExtra",
"readr",
"readxl",
"ggplot2",
"countrycode",
"stringi",
"forecast",
"tibble",
"reshape2",
"corrplot",
"stargazer",
"tinytex",
"cowplot",
"sf",
"dplyr",
"rnaturalearth",
"knitr",
"kableExtra",
"DT",
"FactoMineR",
"factoextra",
"dplyr",
"visdat",
"huxtable",
"plm",
"plotly",
"stargazer"
)
for (pkg in packages) {
if (!pkg %in% installed.packages()) {
install.packages(pkg)}}
for (pkg in packages) {
library(pkg, character.only = TRUE)}
######################################################
## The following sets a few option for nice reports ##
######################################################
# general options
options(
digits = 3,
str = strOptions(strict.width = "cut"),
width = 69,
tibble.width = 69,
cli.unicode = FALSE
)
# ggplot options
theme_set(theme_light())
# knitr options
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
# cache = TRUE,
fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
dpi = 300,
# out.width = "70%",
out.width = "100%",
fig.align = "center",
fig.width = 6,
# fig.asp = 0.618,
fig.show = "hold",
message = FALSE,
echo = FALSE
)
# cleaning of the environment
rm(packages, pkg)
# Import merged database
all_Merge <- read.csv(here("scripts","data","all_Merge.csv"))
goal_vars <- all_Merge %>%
select(starts_with("goal")) %>%
filter_all(all_vars(!is.na(.))) %>%
colnames()
# Create a new column "Goals without NAs" in the data frame
to_plot_missing <- all_Merge %>%
mutate(Goals_without_NAs = rowSums(!is.na(select(., all_of(goal_vars))))) %>%
select(-c(goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal11, goal12, goal13, goal15, goal16, goal17))
# Now, you can use the `vis_dat` function with the updated data frame
vis_dat(to_plot_missing, warn_large_data = FALSE) + scale_fill_brewer(palette = "Paired")
# subset of data
# for question 1: factors (only until 2020 because no information for freedom index after)
data_question1 <- all_Merge %>% filter(year<=2020) %>% select(-c(total_deaths, no_injured, no_affected, no_homeless, total_affected, total_damages, cases_per_million, deaths_per_million, stringency, ongoing, sum_deaths, pop_affected, area_affected, maxintensity))
# for question 2 and 4: time and relationship between SDGs
data_question24 <- all_Merge %>% select(c(code, year, country, continent, region, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal17))
# for question 3: events
# Disasters (only until 2021 because no information for disasters after)
data_question3_1 <- all_Merge %>% filter(year<=2021) %>% select(c(code, year, country, continent, region, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal7, total_deaths, no_injured, no_affected, no_homeless, total_affected, total_damages))
# COVID
data_question3_2 <- all_Merge %>% select(c(code, year, country, continent, region, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal7, cases_per_million, deaths_per_million, stringency))
# Conflicts (only until 2016 because no information for conflicts after)
data_question3_3 <- all_Merge %>% filter(year<=2016) %>% select(c(code, year, country, continent, region, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal7, ongoing, sum_deaths, pop_affected, area_affected, maxintensity))
#### Question1
data_question1 <- data_question1 %>% select(-X)
library(UpSetR)
gg_miss_upset(data_question1)
upset(is.na(data_question1))
variable_names <- names(data_question1)
missing_percentages <- sapply(data_question1, function(col) mean(is.na(col)) * 100)
missing_data_summary <- data.frame(
Variable = variable_names,
Missing_Percentage = missing_percentages
)
missing_data_summary <- missing_data_summary %>%
mutate(VariableGroup = ifelse(startsWith(Variable, "goal") & Missing_Percentage == 0, "Goals without NAs", as.character(Variable)))
ggplot(data = missing_data_summary, aes(x = reorder(VariableGroup, Missing_Percentage), y = Missing_Percentage, fill = Missing_Percentage)) +
geom_bar(stat = "identity") +
geom_text(aes(label = ifelse(Missing_Percentage > 1, sprintf("%.1f%%", Missing_Percentage), ""),
y = Missing_Percentage),
position = position_stack(vjust = 1),  # Adjust vertical position
color = "white",  # Text color
size = 3,          # Text size
hjust = 1.05) +
labs(title = "Percentage of Missing Values by Variable",
x = "Variable",
y = "Missing Percentage") +
theme_minimal() +
theme(axis.text.y = element_text(hjust = 1)) +
coord_flip()
see_missing1_1 <- data_question1 %>%
group_by(code) %>%
summarise(across(-c(year, country, continent, region, population, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal17),
~ sum(is.na(.))) %>%
mutate(num_missing = rowSums(across(everything()))) %>%
filter(num_missing > 50))
upset(see_missing1_1)
upset(fromList(see_missing1_1), order.by = "freq")
naniar::gg_miss_upset(data_question1)
naniar::gg_miss_upset(data_question1, nsets=20)
naniar::gg_miss_upset(data_question1, nsets=50)
naniar::gg_miss_upset(data_question1, nsets=17)
naniar::gg_miss_upset(data_question1, nsets=16)
naniar::gg_miss_upset(data_question1%>%group_by(code), nsets=16)
data_for_UpSetR <- data_question1 %>% group_by(code)
library(UpSetR)
naniar::gg_miss_upset(data_question1, nsets=16)
naniar::gg_miss_upset(data_for_UpSetR, nsets=16)
naniar::gg_miss_upset(data_question1, nsets=16, nintersects=11)
naniar::gg_miss_upset(data_question1, nsets=16, nintersects=20)
naniar::gg_miss_upset(data_question1, nsets=16, nintersects=25)
naniar::gg_miss_upset(data_question1, nsets=16, nintersects=21)
variable_names <- names(data_question1)
missing_percentages <- sapply(data_question1, function(col) mean(is.na(col)) * 100)
missing_data_summary <- data.frame(
Variable = variable_names,
Missing_Percentage = missing_percentages
)
missing_data_summary <- missing_data_summary %>%
mutate(VariableGroup = ifelse(startsWith(Variable, "goal") & Missing_Percentage == 0, "Goals without NAs", as.character(Variable)))
ggplot(data = missing_data_summary, aes(x = reorder(VariableGroup, Missing_Percentage), y = Missing_Percentage, fill = Missing_Percentage)) +
geom_bar(stat = "identity") +
geom_text(aes(label = ifelse(Missing_Percentage > 1, sprintf("%.1f%%", Missing_Percentage), ""),
y = Missing_Percentage),
position = position_stack(vjust = 1),  # Adjust vertical position
color = "white",  # Text color
size = 3,          # Text size
hjust = 1.05) +
labs(title = "Percentage of Missing Values by Variable",
x = "Variable",
y = "Missing Percentage") +
theme_minimal() +
theme(axis.text.y = element_text(hjust = 1)) +
coord_flip()
see_missing1_1 <- data_question1 %>%
View(see_missing1_1)
see_missing1_1 <- data_question1 %>%
see_missing1_1 <- data_question1 %>%
group_by(code) %>%
summarise(across(-c(year, country, continent, region, population, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal17),
~ sum(is.na(.))) %>%
mutate(num_missing = rowSums(across(everything()))) %>%
filter(num_missing > 50))
see_missing1_1 <- data_question1 %>%
group_by(code) %>%
summarise(across(-c(year, country, continent, region, population, overallscore, goal1, goal2, goal3, goal4, goal5, goal6, goal7, goal8, goal9, goal10, goal11, goal12, goal13, goal15, goal16, goal17),
~ sum(is.na(.))) %>%
mutate(num_missing = rowSums(across(everything()))) %>%
filter(num_missing > 50))
see_missing1_2 <- data_question1 %>%
group_by(code) %>%
summarise(across(-c(goal1, goal10),  # Exclude columns "goal1" and "goal10"
~ sum(is.na(.))) %>%
mutate(num_missing = rowSums(across(everything()))) %>%
filter(num_missing > 0))
View(see_missing1_1)
View(see_missing1_2)
