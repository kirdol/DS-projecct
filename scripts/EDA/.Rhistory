name = "Overall Score",
na.value = NA
) +
coord_sf(datum = NA) +
theme_minimal()
ggplotly(gg)
})
# Display the name and overall score of the hovered country
output$hovered_country_text <- renderText({
req(input$map_hover)
hovered_country <- input$map_hover
country_data <- data0[data0$iso_a3 == hovered_country, ]
paste("Country: ", country_data$name, ", Overall Score: ", country_data$overallscore)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Define server logic
server <- function(input, output, session) {
# Filter data based on the selected year
selected_data <- reactive({
filter(data0, year == as.numeric(input$year))
})
# Create an interactive plot with plot_ly
output$map <- renderPlotly({
plot_ly() %>%
add_sf(data = selected_data(), color = ~overallscore, colors = c("darkred", "orange", "yellow", "darkgreen"), opacity = 0.7) %>%
add_sf(data = data0 %>% filter(!iso_a3 %in% selected_data()$iso_a3), fill = "grey50", opacity = 0.7) %>%
colorbar(title = "Overall Score") %>%
layout(geo = list(showland = FALSE, showcoastlines = FALSE))
})
# Display the name and overall score of the hovered country
output$hovered_country_text <- renderText({
req(input$map_hover)
hovered_country <- input$map_hover
country_data <- data0[data0$iso_a3 == hovered_country, ]
paste("Country: ", country_data$name, ", Overall Score: ", country_data$overallscore)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Define UI logic
ui <- function(request) {
fluidPage(
titlePanel("Interactive Map with Overall Score"),
plotlyOutput("map"),
sliderInput("year", "Select Year:", min = 2000, max = 2022, value = 2022, step = 1, width = "100%"),
textOutput("hovered_country_text")
)
}
# Define server logic
server <- function(input, output, session) {
# Filter data based on the selected year
selected_data <- reactive({
filter(data0, year == as.numeric(input$year))
})
# Create a plotly object with hover information
output$map <- renderPlotly({
plot_ly(
type = "choropleth",
z = ~selected_data()$overallscore,
locations = ~selected_data()$iso_a3,
text = ~paste("Country: ", selected_data()$name, "<br>Overall Score: ", selected_data()$overallscore),
colors = c("darkred", "orange", "yellow", "darkgreen"),
colorscale = "Viridis",
colorbar = list(title = "Overall Score"),
hoverinfo = "text"
)
})
# Display the name and overall score of the hovered country
output$hovered_country_text <- renderText({
req(input$hovered_country)
country_data <- data0[data0$iso_a3 == input$hovered_country, ]
paste("Country: ", country_data$name, ", Overall Score: ", country_data$overallscore)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Define server logic
server <- function(input, output, session) {
# Filter data based on the selected year
selected_data <- reactive({
filter(data0, year == as.numeric(input$year))
})
# Create a plotly object with hover information
output$map <- renderPlotly({
plot_ly() %>%
add_sf(data = selected_data(), color = ~overallscore, colors = c("darkred", "orange", "yellow", "darkgreen"), opacity = 0.7) %>%
add_sf(data = data0 %>% filter(!iso_a3 %in% selected_data()$iso_a3), fill = "grey50", opacity = 0.7) %>%
colorbar(title = "Overall Score") %>%
layout(geo = list(showland = FALSE, showcoastlines = FALSE))
})
# Display the name and overall score of the hovered country
output$hovered_country_text <- renderText({
req(input$hovered_country)
country_data <- data0[data0$iso_a3 == input$hovered_country, ]
paste("Country: ", country_data$name, ", Overall Score: ", country_data$overallscore)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Create a plotly object with hover information
output$map <- renderPlotly({
plot_ly() %>%
add_choropleth(
z = ~selected_data()$overallscore,
locations = ~selected_data()$iso_a3,
text = ~paste("Country: ", selected_data()$name, "<br>Overall Score: ", selected_data()$overallscore),
colors = c("darkred", "orange", "yellow", "darkgreen"),
colorbar = list(title = "Overall Score"),
hoverinfo = "text"
) %>%
add_sf(data = data0 %>% filter(!iso_a3 %in% selected_data()$iso_a3), fill = "grey50", opacity = 0.7) %>%
layout(geo = list(showland = FALSE, showcoastlines = FALSE))
})
# Define server logic
server <- function(input, output, session) {
# Filter data based on the selected year
selected_data <- reactive({
filter(data0, year == as.numeric(input$year))
})
# Create an interactive plot with plot_ly
output$map <- renderPlotly({
plot_ly() %>%
add_choropleth(
z = ~selected_data()$overallscore,
locations = ~selected_data()$iso_a3,
text = ~paste("Country: ", selected_data()$name, "<br>Overall Score: ", selected_data()$overallscore),
colors = c("darkred", "orange", "yellow", "darkgreen"),
colorbar = list(title = "Overall Score"),
hoverinfo = "text"
) %>%
add_sf(data = data0 %>% filter(!iso_a3 %in% selected_data()$iso_a3), fill = "grey50", opacity = 0.7) %>%
layout(geo = list(showland = FALSE, showcoastlines = FALSE))
})
# Display the name and overall score of the hovered country
output$hovered_country_text <- renderText({
req(input$map_hover)
hovered_country <- input$map_hover
country_data <- data0[data0$iso_a3 == hovered_country, ]
paste("Country: ", country_data$name, ", Overall Score: ", country_data$overallscore)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Define server logic
server <- function(input, output, session) {
# Filter data based on the selected year
selected_data <- reactive({
filter(data0, year == as.numeric(input$year))
})
# Create a plotly object with hover information
output$map <- renderPlotly({
plot_ly(
type = "choropleth",
z = ~selected_data()$overallscore,
locations = ~selected_data()$iso_a3,
text = ~paste("Country: ", selected_data()$name, "<br>Overall Score: ", selected_data()$overallscore),
colors = c("darkred", "orange", "yellow", "darkgreen"),
colorscale = "Viridis",
colorbar = list(title = "Overall Score"),
hoverinfo = "text"
)
})
# Display the name and overall score of the hovered country
output$hovered_country_text <- renderText({
req(input$hovered_country)
country_data <- data0[data0$iso_a3 == input$hovered_country, ]
paste("Country: ", country_data$name, ", Overall Score: ", country_data$overallscore)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Define server logic
server <- function(input, output, session) {
# Filter data based on the selected year
selected_data <- reactive({
filter(data0, year == as.numeric(input$year))
})
# Create a plotly object with hover information
output$map <- renderPlotly({
plot_ly(
type = "choropleth",
z = ~selected_data()$overallscore,
locations = ~selected_data()$iso_a3,
text = ~paste("Country: ", selected_data()$name, "<br>Overall Score: ", selected_data()$overallscore),
colors = c("darkred", "orange", "yellow", "darkgreen"),
colorbar = list(title = "Overall Score"),
hoverinfo = "text"
)
})
# Display the name and overall score of the hovered country
output$hovered_country_text <- renderText({
req(input$hovered_country)
country_data <- data0[data0$iso_a3 == input$hovered_country, ]
paste("Country: ", country_data$name, ", Overall Score: ", country_data$overallscore)
})
}
# Run the Shiny app
shinyApp(ui, server)
#############################################
## The following loads the needed packages ##
#############################################
# load the required packages and install them if they are not.
install_if_missing <- function(package) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
packages <- c(
"here", # for the project's organization
"tidyverse", # for wrangling
"ggrepel", "gghighlight", "patchwork", "maps", "scales", # for plotting
"stringr",
"dplyr",
"tidyr",
"lubridate",
"gridExtra",
"readr",
"readxl",
"ggplot2",
"countrycode",
"stringi",
"forecast",
"tibble",
"reshape2",
"corrplot",
"stargazer",
"tinytex",
"sf",
"rnaturalearth"
)
for (i in packages) {
install_if_missing(i)
}
######################################################
## The following sets a few option for nice reports ##
######################################################
# general options
options(
digits = 3,
str = strOptions(strict.width = "cut"),
width = 69,
tibble.width = 69,
cli.unicode = FALSE
)
# ggplot options
theme_set(theme_light())
# knitr options
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
# cache = TRUE,
fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
dpi = 300,
out.width = "70%",
fig.align = "center",
fig.width = 6,
fig.asp = 0.618,
fig.show = "hold",
message = FALSE,
echo = FALSE
)
# cleaning of the environment
rm(packages,i,install_if_missing)
data_question2 <- read.csv(here("scripts", "data", "data_question24.csv"), sep=",")
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge data with the world map data
data0 <- merge(world, data_question2, by.x = "iso_a3", by.y = "code", all.x = TRUE)
data0 %>%
st_transform(crs = "+proj=robin") %>%
ggplot() +
geom_sf(color = "lightgrey") +
geom_sf(aes(fill = overallscore), color = NA) +
scale_fill_gradientn(
colors = c("darkred", "orange", "yellow", "darkgreen"),
values = scales::rescale(c(0, 0.25, 0.5, 1)),
name = "Overall Score",
na.value = NA
) +
coord_sf(datum = NA) +
theme_minimal()
install.packages('rnaturalearth')
install.packages("rnaturalearth")
#############################################
## The following loads the needed packages ##
#############################################
# load the required packages and install them if they are not.
install_if_missing <- function(package) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
packages <- c(
"here", # for the project's organization
"tidyverse", # for wrangling
"ggrepel", "gghighlight", "patchwork", "maps", "scales", # for plotting
"stringr",
"dplyr",
"tidyr",
"lubridate",
"gridExtra",
"readr",
"readxl",
"ggplot2",
"countrycode",
"stringi",
"forecast",
"tibble",
"reshape2",
"corrplot",
"stargazer",
"tinytex",
"sf",
"rnaturalearth"
)
for (i in packages) {
install_if_missing(i)
}
######################################################
## The following sets a few option for nice reports ##
######################################################
# general options
options(
digits = 3,
str = strOptions(strict.width = "cut"),
width = 69,
tibble.width = 69,
cli.unicode = FALSE
)
# ggplot options
theme_set(theme_light())
# knitr options
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
# cache = TRUE,
fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
dpi = 300,
out.width = "70%",
fig.align = "center",
fig.width = 6,
fig.asp = 0.618,
fig.show = "hold",
message = FALSE,
echo = FALSE
)
# cleaning of the environment
rm(packages,i,install_if_missing)
data_question2 <- read.csv(here("scripts", "data", "data_question24.csv"), sep=",")
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge data with the world map data
data0 <- merge(world, data_question2, by.x = "iso_a3", by.y = "code", all.x = TRUE)
data0 %>%
st_transform(crs = "+proj=robin") %>%
ggplot() +
geom_sf(color = "lightgrey") +
geom_sf(aes(fill = overallscore), color = NA) +
scale_fill_gradientn(
colors = c("darkred", "orange", "yellow", "darkgreen"),
values = scales::rescale(c(0, 0.25, 0.5, 1)),
name = "Overall Score",
na.value = NA
) +
coord_sf(datum = NA) +
theme_minimal()
#### data ####
data_question1 <- read.csv(here("scripts","data","data_question1.csv"))
Correlation_overall <- data_question1 %>%
select(population:ef_regulation) %>%
select(-age.category)
#############################################
## The following loads the needed packages ##
#############################################
# load the required packages and install them if they are not.
install_if_missing <- function(package) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
packages <- c(
"here", # for the project's organization
"tidyverse", # for wrangling
"ggrepel", "gghighlight", "patchwork", "maps", "scales", # for plotting
"stringr",
"dplyr",
"tidyr",
"lubridate",
"gridExtra",
"readr",
"readxl",
"ggplot2",
"countrycode",
"stringi",
"forecast",
"tibble",
"reshape2",
"corrplot",
"stargazer",
"tinytex"
#"sf",
#"rnaturalearth"
)
for (i in packages) {
install_if_missing(i)
}
######################################################
## The following sets a few option for nice reports ##
######################################################
# general options
options(
digits = 3,
str = strOptions(strict.width = "cut"),
width = 69,
tibble.width = 69,
cli.unicode = FALSE
)
# ggplot options
theme_set(theme_light())
# knitr options
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
# cache = TRUE,
fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
dpi = 300,
out.width = "70%",
fig.align = "center",
fig.width = 6,
fig.asp = 0.618,
fig.show = "hold",
message = FALSE,
echo = FALSE
)
# cleaning of the environment
rm(packages,i,install_if_missing)
#### data ####
data_question1 <- read.csv(here("scripts","data","data_question1.csv"))
Correlation_overall <- data_question1 %>%
select(population:ef_regulation) %>%
select(-age.category)
cor_matrix <- cor(Correlation_overall, use = "pairwise.complete.obs")
print(cor_matrix)
cor_melted <- melt(cor_matrix)
ggplot(data = cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
axis.text.y = element_text(size = 8)) +
coord_fixed() +
labs(x = '', y = '', title = 'Correlation Matrix Heatmap')
Correlation_overall_with_countries <-  Correlation_overall %>%
mutate(data_question1[,1:7])%>%
select(X.1, X, code, year, country, continent, region, everything())
Corr_scaled <- scale(cor_matrix[,c(1:34)])
distmat <- dist(Corr_scaled, method="euclidean", diag=TRUE,upper=TRUE)
avclust <- hclust(distmat, method="average")
clusters <- cutree(avclust, k = 5)
plot(clusters, labels=FALSE, hang = -1)
Correlation_overall_scaled <- scale(Correlation_overall[,c(1:34)])
row.names(Corr_scaled) <- data_question1[,5]
kmean <- kmeans(Corr_scaled, 6)
print(kmean)
par(mfrow=c(2,3))
for (i in 2:18){
boxplot(Correlation_overall[,i], main=names(Correlation_overall[i]), type="l")
}
par(mfrow=c(1,1))
model_goal1 <- lm(goal1 ~ goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal2 <- lm(goal2 ~ goal1 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal3 <- lm(goal3 ~ goal1 + goal2 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal4 <- lm(goal4 ~ goal1 + goal2 + goal3 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal5 <- lm(goal5 ~ goal1 + goal2 + goal3 + goal4 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal6 <- lm(goal6 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal7 <- lm(goal7 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal8 <- lm(goal8 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal9 <- lm(goal9 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal10 <- lm(goal10 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal11 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal11 <- lm(goal11 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal12 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal12 <- lm(goal12 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal13 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal13 <- lm(goal13 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal15 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal15 <- lm(goal15 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal16 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal16 <- lm(goal16 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal17 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
model_goal17 <- lm(goal17 ~ goal1 + goal2 + goal3 + goal4 + goal5 + goal6 + goal7 + goal8 + goal9 + goal10 + goal11 + goal12 + goal13 + goal15 + goal16 + MilitaryExpenditurePercentGDP + internet.usage + pf_law + pf_security + pf_movement + pf_religion + pf_assembly + pf_expression + pf_identity + ef_government + ef_legal + ef_money + ef_trade + ef_regulation, data = Correlation_overall)
summary(model_goal11)
# Function to build the model
build_model <- function(dependent_var, data) {
formula <- as.formula(paste(dependent_var, "~ ."))
lm(formula, data = Correlation_overall[, !(names(data) %in% dependent_var)])
}
# List of all goal variables
goal_vars <- paste0("goal", c(1:13, 15:17))
# List to store models
models <- list()
# Loop over each goal and build the model
for (goal_var in goal_vars) {
models[[goal_var]] <- build_model(goal_var, Correlation_overall)
}
stargazer(model_goal2, title="Regression Results",
align=TRUE, dep.var.labels=c("Overall Rating","High Rating"),
covariate.labels=c("Handling of Complaints","No Special Privileges",
"Opportunity to Learn","Performance-Based Raises","Too Critical","Advancement"),
omit.stat=c("LL","ser","f"), no.space=TRUE)
write.csv(Correlation_overall, file = here("scripts","data","Correlation_overall.csv"))
